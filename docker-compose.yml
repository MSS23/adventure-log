# Adventure Log - Docker Compose Configuration
# This file provides different environments for development and production

version: '3.8'

services:
  # Adventure Log Application
  adventure-log:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: adventure-log-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      # These should be set via .env file or environment variables
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
      - NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN=${NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN}
      - GOOGLE_SITE_VERIFICATION=${GOOGLE_SITE_VERIFICATION}
      - GOOGLE_ANALYTICS_ID=${GOOGLE_ANALYTICS_ID}
    volumes:
      # Mount for persistent logs (optional)
      - adventure-log-logs:/app/logs
    networks:
      - adventure-log-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.adventure-log.rule=Host(`adventurelog.com`) || Host(`www.adventurelog.com`)"
      - "traefik.http.routers.adventure-log.tls=true"
      - "traefik.http.routers.adventure-log.tls.certresolver=letsencrypt"

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: adventure-log-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - adventure-log-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  # Nginx reverse proxy (optional - for production)
  nginx:
    image: nginx:1.25-alpine
    container_name: adventure-log-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    networks:
      - adventure-log-network
    depends_on:
      - adventure-log
    profiles:
      - production

  # Traefik reverse proxy with automatic SSL (alternative to nginx)
  traefik:
    image: traefik:v3.0
    container_name: adventure-log-traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-data:/data
      - ./config/traefik.yml:/etc/traefik/traefik.yml:ro
    networks:
      - adventure-log-network
    environment:
      - CLOUDFLARE_EMAIL=${CLOUDFLARE_EMAIL}
      - CLOUDFLARE_API_KEY=${CLOUDFLARE_API_KEY}
    profiles:
      - production-traefik

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: adventure-log-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - adventure-log-network
    profiles:
      - monitoring

  # Grafana for monitoring dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: adventure-log-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    networks:
      - adventure-log-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

# Networks
networks:
  adventure-log-network:
    driver: bridge
    name: adventure-log-network

# Volumes for persistent data
volumes:
  redis-data:
    name: adventure-log-redis-data
  adventure-log-logs:
    name: adventure-log-logs
  nginx-logs:
    name: adventure-log-nginx-logs
  traefik-data:
    name: adventure-log-traefik-data
  prometheus-data:
    name: adventure-log-prometheus-data
  grafana-data:
    name: adventure-log-grafana-data