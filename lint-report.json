[{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\capacitor.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\eslint.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\next.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\(app)\\albums\\[id]\\actions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\(app)\\albums\\[id]\\edit\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\(app)\\albums\\[id]\\edit\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\(app)\\albums\\[id]\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\(app)\\albums\\[id]\\page.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'user'. Either include it or remove the dependency array.","line":213,"column":6,"nodeType":"ArrayExpression","endLine":213,"endColumn":66,"suggestions":[{"desc":"Update the dependencies array to be: [supabase, params.id, user, getFollowStatus, retryCount]","fix":{"range":[7408,7468],"text":"[supabase, params.id, user, getFollowStatus, retryCount]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\(app)\\albums\\[id]\\upload\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\(app)\\albums\\actions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\(app)\\albums\\new\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\(app)\\albums\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\(app)\\dashboard\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\(app)\\feed\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\(app)\\globe\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\(app)\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\(app)\\organize\\page.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","line":54,"column":6,"nodeType":"ArrayExpression","endLine":54,"endColumn":24,"suggestions":[{"desc":"Update the dependencies array to be: [user, filterType, fetchData]","fix":{"range":[1600,1618],"text":"[user, filterType, fetchData]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'handleDeleteSelected' and 'selectAll'. Either include them or remove the dependency array.","line":214,"column":6,"nodeType":"ArrayExpression","endLine":214,"endColumn":30,"suggestions":[{"desc":"Update the dependencies array to be: [selectedPhotos, photos, selectAll, handleDeleteSelected]","fix":{"range":[5969,5993],"text":"[selectedPhotos, photos, selectAll, handleDeleteSelected]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\(app)\\playlists\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\(app)\\profile\\[userId]\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\(app)\\profile\\edit\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\(app)\\profile\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\(app)\\search\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\(app)\\settings\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\(app)\\stories\\actions.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[676,679],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[676,679],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\(app)\\stories\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\(app)\\wishlist\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\(auth)\\login\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\(auth)\\recover\\page.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkDeletedAccount'. Either include it or remove the dependency array.","line":92,"column":6,"nodeType":"ArrayExpression","endLine":92,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [checkDeletedAccount]","fix":{"range":[2939,2941],"text":"[checkDeletedAccount]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\(auth)\\setup\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\(auth)\\signup\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\(public)\\albums\\shared\\[token]\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Lock' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getPhotoUrl' is defined but never used.","line":29,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'router' is assigned a value but never used.","line":33,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'user' is assigned a value but never used.","line":34,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":15},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadSharedAlbum'. Either include it or remove the dependency array.","line":44,"column":6,"nodeType":"ArrayExpression","endLine":44,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [loadSharedAlbum, params.token]","fix":{"range":[1463,1477],"text":"[loadSharedAlbum, params.token]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { useParams, useRouter } from 'next/navigation';\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport { createClient } from '@/lib/supabase/client';\r\nimport { Card, CardContent } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport {\r\n  ArrowLeft,\r\n  Lock,\r\n  Users,\r\n  Calendar,\r\n  MapPin,\r\n  Camera,\r\n  Loader2,\r\n  AlertCircle,\r\n  Eye,\r\n  Edit,\r\n  Plus\r\n} from 'lucide-react';\r\nimport Link from 'next/link';\r\nimport { PhotoGrid } from '@/components/photos/PhotoGrid';\r\nimport { getShareByToken } from '@/app/actions/album-sharing';\r\nimport type { Album, Photo, AlbumShare, SharePermissionLevel } from '@/types/database';\r\nimport { log } from '@/lib/utils/logger';\r\nimport { LikeButton } from '@/components/social/LikeButton';\r\nimport { getPhotoUrl } from '@/lib/utils/photo-url';\r\n\r\nexport default function SharedAlbumPage() {\r\n  const params = useParams();\r\n  const router = useRouter();\r\n  const { user } = useAuth();\r\n  const [share, setShare] = useState<AlbumShare | null>(null);\r\n  const [album, setAlbum] = useState<Album | null>(null);\r\n  const [photos, setPhotos] = useState<Photo[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const supabase = createClient();\r\n\r\n  useEffect(() => {\r\n    loadSharedAlbum();\r\n  }, [params.token]);\r\n\r\n  const loadSharedAlbum = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      // Get share by token\r\n      const shareResult = await getShareByToken(params.token as string);\r\n\r\n      if (!shareResult.success || !shareResult.data) {\r\n        throw new Error(shareResult.error || 'Share not found');\r\n      }\r\n\r\n      const shareData = shareResult.data as AlbumShare & {\r\n        album?: Album;\r\n        shared_by?: { username: string; display_name?: string; avatar_url?: string };\r\n      };\r\n\r\n      setShare(shareData);\r\n      setAlbum(shareData.album || null);\r\n\r\n      // Fetch photos\r\n      if (shareData.album?.id) {\r\n        const { data: photosData, error: photosError } = await supabase\r\n          .from('photos')\r\n          .select('*')\r\n          .eq('album_id', shareData.album.id)\r\n          .order('order_index', { ascending: true });\r\n\r\n        if (photosError) {\r\n          log.error('Failed to fetch photos', {\r\n            component: 'SharedAlbumPage',\r\n            albumId: shareData.album.id,\r\n          }, photosError);\r\n        } else {\r\n          setPhotos(photosData || []);\r\n        }\r\n      }\r\n    } catch (err) {\r\n      log.error('Failed to load shared album', {\r\n        component: 'SharedAlbumPage',\r\n        token: params.token,\r\n      }, err as Error);\r\n      setError(err instanceof Error ? err.message : 'Failed to load shared album');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getPermissionIcon = (level?: SharePermissionLevel) => {\r\n    switch (level) {\r\n      case 'view':\r\n        return <Eye className=\"h-4 w-4\" />;\r\n      case 'contribute':\r\n        return <Plus className=\"h-4 w-4\" />;\r\n      case 'edit':\r\n        return <Edit className=\"h-4 w-4\" />;\r\n      default:\r\n        return <Eye className=\"h-4 w-4\" />;\r\n    }\r\n  };\r\n\r\n  const getPermissionLabel = (level?: SharePermissionLevel) => {\r\n    switch (level) {\r\n      case 'view':\r\n        return 'View Only';\r\n      case 'contribute':\r\n        return 'Can Contribute';\r\n      case 'edit':\r\n        return 'Can Edit';\r\n      default:\r\n        return 'View Only';\r\n    }\r\n  };\r\n\r\n  const canContribute = share?.permission_level === 'contribute' || share?.permission_level === 'edit';\r\n  const canEdit = share?.permission_level === 'edit';\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\r\n        <Card className=\"max-w-md w-full\">\r\n          <CardContent className=\"py-12\">\r\n            <div className=\"flex flex-col items-center gap-4\">\r\n              <Loader2 className=\"h-8 w-8 animate-spin text-blue-600\" />\r\n              <p className=\"text-gray-600\">Loading shared album...</p>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error || !share || !album) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-4\">\r\n        <Card className=\"max-w-md w-full border-red-200 bg-red-50\">\r\n          <CardContent className=\"py-8\">\r\n            <div className=\"flex flex-col items-center gap-4 text-center\">\r\n              <div className=\"w-12 h-12 bg-red-100 rounded-full flex items-center justify-center\">\r\n                <AlertCircle className=\"h-6 w-6 text-red-600\" />\r\n              </div>\r\n              <div>\r\n                <h3 className=\"font-semibold text-lg text-red-900\">Cannot Access Album</h3>\r\n                <p className=\"text-red-700 mt-2\">\r\n                  {error || 'This share link may have expired or been revoked.'}\r\n                </p>\r\n              </div>\r\n              <Link href=\"/albums\">\r\n                <Button variant=\"outline\" className=\"mt-2\">\r\n                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\r\n                  Back to Albums\r\n                </Button>\r\n              </Link>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 pb-20\">\r\n      {/* Header */}\r\n      <div className=\"bg-white border-b sticky top-0 z-10\">\r\n        <div className=\"max-w-5xl mx-auto px-4 py-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <Link href=\"/albums\">\r\n              <Button variant=\"ghost\" size=\"sm\">\r\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\r\n                Back\r\n              </Button>\r\n            </Link>\r\n            <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\r\n              {getPermissionIcon(share.permission_level)}\r\n              {getPermissionLabel(share.permission_level)}\r\n            </Badge>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"max-w-5xl mx-auto px-4 py-6 space-y-6\">\r\n        {/* Album Info */}\r\n        <Card>\r\n          <CardContent className=\"py-6\">\r\n            <div className=\"space-y-4\">\r\n              {/* Shared by notice */}\r\n              <div className=\"flex items-center gap-2 text-sm text-gray-600 bg-blue-50 p-3 rounded-lg\">\r\n                <Users className=\"h-4 w-4 text-blue-600\" />\r\n                <span>\r\n                  Shared by{' '}\r\n                  <span className=\"font-medium text-blue-900\">\r\n                    {share.shared_by?.display_name || share.shared_by?.username || 'Someone'}\r\n                  </span>\r\n                </span>\r\n              </div>\r\n\r\n              {/* Title & Description */}\r\n              <div>\r\n                <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\r\n                  {album.title}\r\n                </h1>\r\n                {album.description && (\r\n                  <p className=\"text-gray-700 text-lg\">{album.description}</p>\r\n                )}\r\n              </div>\r\n\r\n              {/* Metadata */}\r\n              <div className=\"flex flex-wrap gap-4 text-sm text-gray-600\">\r\n                {album.location_name && (\r\n                  <div className=\"flex items-center gap-1\">\r\n                    <MapPin className=\"h-4 w-4\" />\r\n                    <span>{album.location_name}</span>\r\n                  </div>\r\n                )}\r\n\r\n                {(album.date_start || album.date_end) && (\r\n                  <div className=\"flex items-center gap-1\">\r\n                    <Calendar className=\"h-4 w-4\" />\r\n                    <span>\r\n                      {album.date_start && new Date(album.date_start).toLocaleDateString()}\r\n                      {album.date_end && album.date_start !== album.date_end &&\r\n                        ` - ${new Date(album.date_end).toLocaleDateString()}`}\r\n                    </span>\r\n                  </div>\r\n                )}\r\n\r\n                <div className=\"flex items-center gap-1\">\r\n                  <Camera className=\"h-4 w-4\" />\r\n                  <span>{photos.length} photo{photos.length !== 1 ? 's' : ''}</span>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Actions */}\r\n              <div className=\"flex items-center gap-3 pt-4 border-t\">\r\n                <LikeButton albumId={album.id} />\r\n\r\n                {canContribute && (\r\n                  <Link href={`/albums/${album.id}/upload`}>\r\n                    <Button size=\"sm\" variant=\"outline\">\r\n                      <Plus className=\"h-4 w-4 mr-2\" />\r\n                      Add Photos\r\n                    </Button>\r\n                  </Link>\r\n                )}\r\n\r\n                {canEdit && (\r\n                  <Link href={`/albums/${album.id}/edit`}>\r\n                    <Button size=\"sm\" variant=\"outline\">\r\n                      <Edit className=\"h-4 w-4 mr-2\" />\r\n                      Edit Album\r\n                    </Button>\r\n                  </Link>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Photos Grid */}\r\n        {photos.length > 0 ? (\r\n          <PhotoGrid\r\n            photos={photos}\r\n            albumId={album.id}\r\n          />\r\n        ) : (\r\n          <Card>\r\n            <CardContent className=\"py-12 text-center\">\r\n              <Camera className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\r\n              <p className=\"text-gray-600\">This album doesn&apos;t have any photos yet.</p>\r\n              {canContribute && (\r\n                <Link href={`/albums/${album.id}/upload`}>\r\n                  <Button className=\"mt-4\">\r\n                    <Plus className=\"h-4 w-4 mr-2\" />\r\n                    Add Photos\r\n                  </Button>\r\n                </Link>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\(public)\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\actions\\album-sharing.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\actions\\photo-metadata.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\api\\albums\\[id]\\cover-position\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\api\\geocode\\route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":72,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server'\nimport { createClient } from '@/lib/supabase/server'\n\nexport async function GET(request: NextRequest) {\n  // SECURITY: Require authentication to prevent unauthorized API access\n  const supabase = await createClient()\n  const { data: { user }, error: authError } = await supabase.auth.getUser()\n\n  if (authError || !user) {\n    return NextResponse.json(\n      { error: 'Unauthorized - authentication required' },\n      { status: 401 }\n    )\n  }\n\n  const { searchParams } = new URL(request.url)\n  const query = searchParams.get('q')\n  const lat = searchParams.get('lat')\n  const lon = searchParams.get('lon')\n  const reverse = searchParams.get('reverse')\n\n  try {\n    let nominatimUrl: string\n\n    if (reverse === 'true' && lat && lon) {\n      // Reverse geocoding\n      nominatimUrl = `https://nominatim.openstreetmap.org/reverse?` +\n        new URLSearchParams({\n          lat,\n          lon,\n          format: 'json',\n          'accept-language': 'en'\n        }).toString()\n    } else if (query) {\n      // Forward geocoding\n      nominatimUrl = `https://nominatim.openstreetmap.org/search?` +\n        new URLSearchParams({\n          q: query,\n          format: 'json',\n          limit: '8',\n          dedupe: '1',\n          'accept-language': 'en',\n          addressdetails: '1'\n        }).toString()\n    } else {\n      return NextResponse.json(\n        { error: 'Missing required parameters' },\n        { status: 400 }\n      )\n    }\n\n    const response = await fetch(nominatimUrl, {\n      headers: {\n        'User-Agent': 'Adventure Log App (contact@example.com)'\n      }\n    })\n\n    if (!response.ok) {\n      throw new Error(`OpenStreetMap API error: ${response.status}`)\n    }\n\n    const data = await response.json()\n\n    return NextResponse.json(data, {\n      headers: {\n        'Cache-Control': 'public, max-age=300', // 5 minutes cache\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET',\n        'Access-Control-Allow-Headers': 'Content-Type'\n      }\n    })\n  } catch (error) {\n    // Use proper error handling without exposing internal details\n    return NextResponse.json(\n      { error: 'Failed to fetch location data' },\n      { status: 500 }\n    )\n  }\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\api\\globe-reactions\\[id]\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\api\\globe-reactions\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\api\\globe-reactions\\types\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\api\\health\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\api\\manifest\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\api\\monitoring\\errors\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\api\\monitoring\\performance\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\api\\monitoring\\security\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\api\\monitoring\\web-vitals\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\api\\playlists\\[id]\\items\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\api\\playlists\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\auth\\callback\\route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\forgot-password\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\offline\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\privacy\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\reset-password\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\sitemap.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\app\\terms\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\ErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\albums\\AlbumSuggestions.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Photo' is defined but never used.","line":14,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":20},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadSuggestions'. Either include it or remove the dependency array.","line":30,"column":6,"nodeType":"ArrayExpression","endLine":30,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadSuggestions, user]","fix":{"range":[1249,1255],"text":"[loadSuggestions, user]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport { createClient } from '@/lib/supabase/client';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Sparkles, Check, X, Calendar, MapPin, Camera, Loader2 } from 'lucide-react';\r\nimport Image from 'next/image';\r\nimport { getPhotoUrl } from '@/lib/utils/photo-url';\r\nimport { generateAlbumSuggestions, filterExistingAlbums, type AlbumSuggestion } from '@/lib/ai/album-suggestions';\r\nimport type { Photo } from '@/types/database';\r\nimport { log } from '@/lib/utils/logger';\r\nimport { Toast } from '@capacitor/toast';\r\n\r\nexport function AlbumSuggestions() {\r\n  const { user } = useAuth();\r\n  const router = useRouter();\r\n  const [suggestions, setSuggestions] = useState<AlbumSuggestion[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [creating, setCreating] = useState<string | null>(null);\r\n  const supabase = createClient();\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      loadSuggestions();\r\n    }\r\n  }, [user]);\r\n\r\n  const loadSuggestions = async () => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      // Fetch all user photos\r\n      const { data: photos, error: photosError } = await supabase\r\n        .from('photos')\r\n        .select('*')\r\n        .eq('user_id', user!.id)\r\n        .not('taken_at', 'is', null);\r\n\r\n      if (photosError) throw photosError;\r\n\r\n      // Fetch existing album photo IDs to filter out\r\n      const { data: existingPhotos } = await supabase\r\n        .from('photos')\r\n        .select('id')\r\n        .eq('user_id', user!.id)\r\n        .not('album_id', 'is', null);\r\n\r\n      const existingPhotoIds = new Set(existingPhotos?.map(p => p.id) || []);\r\n\r\n      // Generate suggestions\r\n      const allSuggestions = generateAlbumSuggestions(photos || []);\r\n      const filteredSuggestions = filterExistingAlbums(allSuggestions, existingPhotoIds);\r\n\r\n      // Take top 5 suggestions\r\n      setSuggestions(filteredSuggestions.slice(0, 5));\r\n    } catch (error) {\r\n      log.error('Failed to generate album suggestions', { component: 'AlbumSuggestions' }, error as Error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const createAlbumFromSuggestion = async (suggestion: AlbumSuggestion) => {\r\n    setCreating(suggestion.id);\r\n\r\n    try {\r\n      // Create album\r\n      const { data: album, error: albumError } = await supabase\r\n        .from('albums')\r\n        .insert({\r\n          user_id: user!.id,\r\n          title: suggestion.suggested_title,\r\n          description: suggestion.suggested_description,\r\n          date_start: suggestion.start_date,\r\n          date_end: suggestion.end_date,\r\n          location_name: suggestion.location_name,\r\n          location_lat: suggestion.latitude,\r\n          location_lng: suggestion.longitude,\r\n          visibility: 'public',\r\n          status: 'published',\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (albumError) throw albumError;\r\n\r\n      // Assign photos to album\r\n      const photoUpdates = suggestion.photos.map((photo, index) => ({\r\n        id: photo.id,\r\n        album_id: album.id,\r\n        order_index: index,\r\n      }));\r\n\r\n      for (const update of photoUpdates) {\r\n        await supabase\r\n          .from('photos')\r\n          .update({\r\n            album_id: update.album_id,\r\n            order_index: update.order_index,\r\n          })\r\n          .eq('id', update.id);\r\n      }\r\n\r\n      // Set cover photo\r\n      if (suggestion.photos.length > 0) {\r\n        await supabase\r\n          .from('albums')\r\n          .update({\r\n            cover_photo_url: suggestion.photos[0].file_path,\r\n          })\r\n          .eq('id', album.id);\r\n      }\r\n\r\n      await Toast.show({\r\n        text: `Album \"${suggestion.suggested_title}\" created!`,\r\n        duration: 'short',\r\n      });\r\n\r\n      // Remove suggestion from list\r\n      setSuggestions(suggestions.filter(s => s.id !== suggestion.id));\r\n\r\n      // Navigate to album\r\n      router.push(`/albums/${album.id}`);\r\n    } catch (error) {\r\n      log.error('Failed to create album from suggestion', { component: 'AlbumSuggestions' }, error as Error);\r\n      await Toast.show({\r\n        text: 'Failed to create album',\r\n        duration: 'short',\r\n      });\r\n    } finally {\r\n      setCreating(null);\r\n    }\r\n  };\r\n\r\n  const dismissSuggestion = (suggestionId: string) => {\r\n    setSuggestions(suggestions.filter(s => s.id !== suggestionId));\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Card>\r\n        <CardContent className=\"py-8\">\r\n          <div className=\"flex items-center justify-center gap-2\">\r\n            <Loader2 className=\"h-5 w-5 animate-spin\" />\r\n            <span>Analyzing your photos...</span>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  if (suggestions.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <div className=\"flex items-center gap-2\">\r\n        <Sparkles className=\"h-5 w-5 text-purple-600\" />\r\n        <h2 className=\"text-xl font-bold\">Album Suggestions</h2>\r\n        <Badge variant=\"secondary\" className=\"ml-2\">\r\n          AI-Generated\r\n        </Badge>\r\n      </div>\r\n\r\n      <p className=\"text-sm text-gray-600\">\r\n        We found {suggestions.length} potential album{suggestions.length > 1 ? 's' : ''} based on your photos&apos; dates and locations.\r\n      </p>\r\n\r\n      <div className=\"grid gap-4\">\r\n        {suggestions.map((suggestion) => (\r\n          <Card key={suggestion.id} className=\"overflow-hidden\">\r\n            <CardHeader className=\"pb-3\">\r\n              <div className=\"flex items-start justify-between\">\r\n                <div className=\"flex-1\">\r\n                  <CardTitle className=\"text-lg\">{suggestion.suggested_title}</CardTitle>\r\n                  <CardDescription className=\"mt-1\">\r\n                    {suggestion.suggested_description}\r\n                  </CardDescription>\r\n                </div>\r\n                <Badge\r\n                  variant={\r\n                    suggestion.confidence_score >= 80\r\n                      ? 'default'\r\n                      : suggestion.confidence_score >= 60\r\n                      ? 'secondary'\r\n                      : 'outline'\r\n                  }\r\n                >\r\n                  {suggestion.confidence_score}% match\r\n                </Badge>\r\n              </div>\r\n            </CardHeader>\r\n\r\n            <CardContent className=\"space-y-4\">\r\n              {/* Metadata */}\r\n              <div className=\"flex flex-wrap gap-4 text-sm text-gray-600\">\r\n                {suggestion.start_date && (\r\n                  <div className=\"flex items-center gap-1\">\r\n                    <Calendar className=\"h-4 w-4\" />\r\n                    <span>\r\n                      {new Date(suggestion.start_date).toLocaleDateString()} - {new Date(suggestion.end_date!).toLocaleDateString()}\r\n                    </span>\r\n                  </div>\r\n                )}\r\n                {suggestion.location_name && (\r\n                  <div className=\"flex items-center gap-1\">\r\n                    <MapPin className=\"h-4 w-4\" />\r\n                    <span>{suggestion.location_name}</span>\r\n                  </div>\r\n                )}\r\n                <div className=\"flex items-center gap-1\">\r\n                  <Camera className=\"h-4 w-4\" />\r\n                  <span>{suggestion.photos.length} photos</span>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Photo preview */}\r\n              <div className=\"grid grid-cols-4 gap-2\">\r\n                {suggestion.photos.slice(0, 4).map((photo, index) => (\r\n                  <div key={photo.id} className=\"relative aspect-square\">\r\n                    <Image\r\n                      src={getPhotoUrl(photo.file_path) || ''}\r\n                      alt={`Preview ${index + 1}`}\r\n                      fill\r\n                      className=\"object-cover rounded\"\r\n                    />\r\n                  </div>\r\n                ))}\r\n                {suggestion.photos.length > 4 && (\r\n                  <div className=\"relative aspect-square bg-gray-100 rounded flex items-center justify-center\">\r\n                    <span className=\"text-sm text-gray-600\">\r\n                      +{suggestion.photos.length - 4} more\r\n                    </span>\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              {/* Actions */}\r\n              <div className=\"flex items-center gap-2 pt-2\">\r\n                <Button\r\n                  onClick={() => createAlbumFromSuggestion(suggestion)}\r\n                  disabled={creating !== null}\r\n                  className=\"flex-1\"\r\n                >\r\n                  {creating === suggestion.id ? (\r\n                    <>\r\n                      <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\r\n                      Creating...\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <Check className=\"h-4 w-4 mr-2\" />\r\n                      Create Album\r\n                    </>\r\n                  )}\r\n                </Button>\r\n                <Button\r\n                  variant=\"outline\"\r\n                  onClick={() => dismissSuggestion(suggestion.id)}\r\n                  disabled={creating !== null}\r\n                >\r\n                  <X className=\"h-4 w-4\" />\r\n                </Button>\r\n              </div>\r\n\r\n              {/* Reason */}\r\n              <p className=\"text-xs text-gray-500 italic\">\r\n                Suggested because: {suggestion.reason}\r\n              </p>\r\n            </CardContent>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\albums\\CoverPhotoPositionEditor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\albums\\EditCoverPositionButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\albums\\ExportAlbumButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\albums\\ShareAlbumDialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'X' is defined but never used.","line":4,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Settings' is defined but never used.","line":4,"column":62,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":70},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'updateAlbumShare' is defined but never used.","line":24,"column":62,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":78},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadShares'. Either include it or remove the dependency array.","line":51,"column":6,"nodeType":"ArrayExpression","endLine":51,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadShares, open]","fix":{"range":[1638,1644],"text":"[loadShares, open]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { Copy, Check, X, UserPlus, Link as LinkIcon, Trash2, Settings, Clock } from 'lucide-react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogDescription,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogTrigger,\r\n} from '@/components/ui/dialog';\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from '@/components/ui/select';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { createAlbumShare, getAlbumShares, deleteAlbumShare, updateAlbumShare } from '@/app/actions/album-sharing';\r\nimport type { AlbumShare, SharePermissionLevel } from '@/types/database';\r\nimport { log } from '@/lib/utils/logger';\r\nimport { Toast } from '@capacitor/toast';\r\n\r\ninterface ShareAlbumDialogProps {\r\n  albumId: string;\r\n  albumTitle: string;\r\n  trigger?: React.ReactNode;\r\n}\r\n\r\nexport function ShareAlbumDialog({ albumId, albumTitle, trigger }: ShareAlbumDialogProps) {\r\n  const [open, setOpen] = useState(false);\r\n  const [shares, setShares] = useState<AlbumShare[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [copied, setCopied] = useState(false);\r\n\r\n  // Form state\r\n  const [email, setEmail] = useState('');\r\n  const [permissionLevel, setPermissionLevel] = useState<SharePermissionLevel>('view');\r\n  const [expirationDays, setExpirationDays] = useState<string>('never');\r\n\r\n  // Load existing shares\r\n  useEffect(() => {\r\n    if (open) {\r\n      loadShares();\r\n    }\r\n  }, [open]);\r\n\r\n  const loadShares = async () => {\r\n    const result = await getAlbumShares(albumId);\r\n    if (result.success && result.data) {\r\n      setShares(result.data);\r\n    }\r\n  };\r\n\r\n  const handleCreateShare = async () => {\r\n    if (!email && expirationDays === 'never') {\r\n      // Create public link\r\n      await createPublicShare();\r\n    } else {\r\n      // Create user-specific share\r\n      await createUserShare();\r\n    }\r\n  };\r\n\r\n  const createPublicShare = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const result = await createAlbumShare({\r\n        album_id: albumId,\r\n        permission_level: permissionLevel,\r\n      });\r\n\r\n      if (result.success && result.data) {\r\n        await Toast.show({\r\n          text: 'Share link created successfully!',\r\n          duration: 'short',\r\n        });\r\n        setShares([...shares, result.data]);\r\n        copyShareLink(result.data.share_token);\r\n      } else {\r\n        throw new Error(result.error || 'Failed to create share');\r\n      }\r\n    } catch (error) {\r\n      log.error('Failed to create share', { component: 'ShareAlbumDialog' }, error as Error);\r\n      await Toast.show({\r\n        text: 'Failed to create share link',\r\n        duration: 'short',\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const createUserShare = async () => {\r\n    if (!email) {\r\n      await Toast.show({\r\n        text: 'Please enter an email address',\r\n        duration: 'short',\r\n      });\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      const expiresAt = expirationDays !== 'never'\r\n        ? new Date(Date.now() + parseInt(expirationDays) * 24 * 60 * 60 * 1000).toISOString()\r\n        : undefined;\r\n\r\n      const result = await createAlbumShare({\r\n        album_id: albumId,\r\n        shared_with_email: email,\r\n        permission_level: permissionLevel,\r\n        expires_at: expiresAt,\r\n      });\r\n\r\n      if (result.success && result.data) {\r\n        await Toast.show({\r\n          text: `Album shared with ${email}!`,\r\n          duration: 'short',\r\n        });\r\n        setShares([...shares, result.data]);\r\n        setEmail('');\r\n      } else {\r\n        throw new Error(result.error || 'Failed to share album');\r\n      }\r\n    } catch (error) {\r\n      log.error('Failed to share album', { component: 'ShareAlbumDialog' }, error as Error);\r\n      await Toast.show({\r\n        text: error instanceof Error ? error.message : 'Failed to share album',\r\n        duration: 'long',\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const copyShareLink = (token: string) => {\r\n    const url = `${window.location.origin}/albums/shared/${token}`;\r\n    navigator.clipboard.writeText(url);\r\n    setCopied(true);\r\n    setTimeout(() => setCopied(false), 2000);\r\n  };\r\n\r\n  const handleDeleteShare = async (shareId: string) => {\r\n    const result = await deleteAlbumShare(shareId);\r\n    if (result.success) {\r\n      setShares(shares.filter(s => s.id !== shareId));\r\n      await Toast.show({\r\n        text: 'Share revoked successfully',\r\n        duration: 'short',\r\n      });\r\n    }\r\n  };\r\n\r\n  const getPermissionLabel = (level: SharePermissionLevel) => {\r\n    switch (level) {\r\n      case 'view':\r\n        return 'Can view';\r\n      case 'contribute':\r\n        return 'Can add photos';\r\n      case 'edit':\r\n        return 'Can edit';\r\n      default:\r\n        return level;\r\n    }\r\n  };\r\n\r\n  const getPermissionColor = (level: SharePermissionLevel) => {\r\n    switch (level) {\r\n      case 'view':\r\n        return 'bg-gray-100 text-gray-800';\r\n      case 'contribute':\r\n        return 'bg-blue-100 text-blue-800';\r\n      case 'edit':\r\n        return 'bg-purple-100 text-purple-800';\r\n      default:\r\n        return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Dialog open={open} onOpenChange={setOpen}>\r\n      <DialogTrigger asChild>\r\n        {trigger || (\r\n          <Button variant=\"outline\" size=\"sm\">\r\n            <UserPlus className=\"h-4 w-4 mr-2\" />\r\n            Share\r\n          </Button>\r\n        )}\r\n      </DialogTrigger>\r\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\r\n        <DialogHeader>\r\n          <DialogTitle>Share &quot;{albumTitle}&quot;</DialogTitle>\r\n          <DialogDescription>\r\n            Invite others to view or collaborate on this album\r\n          </DialogDescription>\r\n        </DialogHeader>\r\n\r\n        <div className=\"space-y-6\">\r\n          {/* Create new share */}\r\n          <div className=\"space-y-4 p-4 border border-gray-200 rounded-lg bg-gray-50\">\r\n            <h3 className=\"font-semibold text-sm\">Invite someone</h3>\r\n\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"email\">Email address (optional for link sharing)</Label>\r\n              <Input\r\n                id=\"email\"\r\n                type=\"email\"\r\n                placeholder=\"friend@example.com\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"grid grid-cols-2 gap-4\">\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"permission\">Permission level</Label>\r\n                <Select\r\n                  value={permissionLevel}\r\n                  onValueChange={(value) => setPermissionLevel(value as SharePermissionLevel)}\r\n                >\r\n                  <SelectTrigger id=\"permission\">\r\n                    <SelectValue />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"view\">\r\n                      <div className=\"flex flex-col items-start\">\r\n                        <span className=\"font-medium\">Can view</span>\r\n                        <span className=\"text-xs text-gray-500\">View photos only</span>\r\n                      </div>\r\n                    </SelectItem>\r\n                    <SelectItem value=\"contribute\">\r\n                      <div className=\"flex flex-col items-start\">\r\n                        <span className=\"font-medium\">Can contribute</span>\r\n                        <span className=\"text-xs text-gray-500\">Add photos and comments</span>\r\n                      </div>\r\n                    </SelectItem>\r\n                    <SelectItem value=\"edit\">\r\n                      <div className=\"flex flex-col items-start\">\r\n                        <span className=\"font-medium\">Can edit</span>\r\n                        <span className=\"text-xs text-gray-500\">Full access (add, delete, edit)</span>\r\n                      </div>\r\n                    </SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"expiration\">Expires in</Label>\r\n                <Select value={expirationDays} onValueChange={setExpirationDays}>\r\n                  <SelectTrigger id=\"expiration\">\r\n                    <SelectValue />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"never\">Never</SelectItem>\r\n                    <SelectItem value=\"1\">1 day</SelectItem>\r\n                    <SelectItem value=\"7\">7 days</SelectItem>\r\n                    <SelectItem value=\"30\">30 days</SelectItem>\r\n                    <SelectItem value=\"90\">90 days</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n            </div>\r\n\r\n            <Button\r\n              onClick={handleCreateShare}\r\n              disabled={loading}\r\n              className=\"w-full\"\r\n            >\r\n              {loading ? (\r\n                'Creating...'\r\n              ) : email ? (\r\n                <>\r\n                  <UserPlus className=\"h-4 w-4 mr-2\" />\r\n                  Send invitation\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <LinkIcon className=\"h-4 w-4 mr-2\" />\r\n                  Create share link\r\n                </>\r\n              )}\r\n            </Button>\r\n          </div>\r\n\r\n          {/* Existing shares */}\r\n          {shares.length > 0 && (\r\n            <div className=\"space-y-3\">\r\n              <h3 className=\"font-semibold text-sm\">Active shares ({shares.length})</h3>\r\n              <div className=\"space-y-2\">\r\n                {shares.map((share) => (\r\n                  <div\r\n                    key={share.id}\r\n                    className=\"flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:bg-gray-50\"\r\n                  >\r\n                    <div className=\"flex-1 min-w-0\">\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <span className=\"font-medium text-sm truncate\">\r\n                          {share.shared_with?.email || share.shared_with?.username || 'Anyone with link'}\r\n                        </span>\r\n                        <Badge className={getPermissionColor(share.permission_level)}>\r\n                          {getPermissionLabel(share.permission_level)}\r\n                        </Badge>\r\n                        {share.expires_at && (\r\n                          <Badge variant=\"outline\" className=\"text-xs\">\r\n                            <Clock className=\"h-3 w-3 mr-1\" />\r\n                            Expires {new Date(share.expires_at).toLocaleDateString()}\r\n                          </Badge>\r\n                        )}\r\n                      </div>\r\n                      {!share.shared_with_user_id && (\r\n                        <button\r\n                          onClick={() => copyShareLink(share.share_token)}\r\n                          className=\"text-xs text-blue-600 hover:underline mt-1 flex items-center gap-1\"\r\n                        >\r\n                          {copied ? (\r\n                            <>\r\n                              <Check className=\"h-3 w-3\" />\r\n                              Copied!\r\n                            </>\r\n                          ) : (\r\n                            <>\r\n                              <Copy className=\"h-3 w-3\" />\r\n                              Copy link\r\n                            </>\r\n                          )}\r\n                        </button>\r\n                      )}\r\n                    </div>\r\n\r\n                    <Button\r\n                      variant=\"ghost\"\r\n                      size=\"sm\"\r\n                      onClick={() => handleDeleteShare(share.id)}\r\n                      className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\r\n                    >\r\n                      <Trash2 className=\"h-4 w-4\" />\r\n                    </Button>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\auth\\AuthProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\auth\\ConditionalAuthProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\auth\\ProtectedRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\common\\CountrySearch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\common\\PrivacySelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\dashboard\\MonthlyHighlights.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchCommunityHighlights' and 'fetchFriendsHighlights'. Either include them or remove the dependency array.","line":269,"column":6,"nodeType":"ArrayExpression","endLine":269,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [fetchCommunityHighlights, fetchFriendsHighlights, user]","fix":{"range":[9306,9312],"text":"[fetchCommunityHighlights, fetchFriendsHighlights, user]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\dashboard\\QuickActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\dashboard\\TravelAchievements.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\dashboard\\TravelInsights.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\error\\ErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\feed\\MiniGlobe.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[798,801],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[798,801],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'d' is defined but never used.","line":131,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":131,"endColumn":24,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":131,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":131,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4057,4060],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4057,4060],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\globe\\AlbumImageModal.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'cluster'. Either include it or remove the dependency array.","line":88,"column":6,"nodeType":"ArrayExpression","endLine":88,"endColumn":27,"suggestions":[{"desc":"Update the dependencies array to be: [cluster, cluster.id, isOpen]","fix":{"range":[2842,2863],"text":"[cluster, cluster.id, isOpen]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\globe\\CityPinSystem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\globe\\EnhancedGlobe.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has unnecessary dependencies: 'selectedYear' and 'setSelectedYear'. Either exclude them or remove the dependency array.","line":928,"column":6,"nodeType":"ArrayExpression","endLine":928,"endColumn":102,"suggestions":[{"desc":"Update the dependencies array to be: [currentAlbumIndex, chronologicalAlbums, animateCameraToPosition]","fix":{"range":[32322,32418],"text":"[currentAlbumIndex, chronologicalAlbums, animateCameraToPosition]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has unnecessary dependencies: 'selectedYear' and 'setSelectedYear'. Either exclude them or remove the dependency array.","line":979,"column":6,"nodeType":"ArrayExpression","endLine":979,"endColumn":102,"suggestions":[{"desc":"Update the dependencies array to be: [currentAlbumIndex, chronologicalAlbums, animateCameraToPosition]","fix":{"range":[34187,34283],"text":"[currentAlbumIndex, chronologicalAlbums, animateCameraToPosition]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The ref value 'globeRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'globeRef.current' to a variable inside the effect, and use that variable in the cleanup function.","line":1469,"column":39,"nodeType":"Identifier","endLine":1469,"endColumn":46}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'isPlaying' and 'pause'. Either include them or remove the dependency array.","line":450,"column":6,"nodeType":"ArrayExpression","endLine":450,"endColumn":34,"suggestions":[{"desc":"Update the dependencies array to be: [locations, progressionMode, isPlaying, pause]","fix":{"range":[15979,16007],"text":"[locations, progressionMode, isPlaying, pause]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\r\n\r\nimport { useRef, useEffect, useState, useMemo, useCallback } from 'react'\r\nimport { flushSync } from 'react-dom'\r\nimport dynamic from 'next/dynamic'\r\nimport type { GlobeMethods } from 'react-globe.gl'\r\nimport { useTravelTimeline, type TravelLocation, type Album } from '@/lib/hooks/useTravelTimeline'\r\nimport { useFlightAnimation } from '@/lib/hooks/useFlightAnimation'\r\nimport { FlightAnimation } from './FlightAnimation'\r\nimport { CityPinSystem, formatPinTooltip, type CityPin, type CityCluster } from './CityPinSystem'\r\nimport { AlbumImageModal } from './AlbumImageModal'\r\nimport type { GlobeInstance, GlobeHtmlElement } from '@/types/globe'\r\nimport { GlobeSearch, type GlobeSearchResult } from './GlobeSearch'\r\nimport { Card, CardContent } from '@/components/ui/card'\r\nimport { Button } from '@/components/ui/button'\r\nimport {\r\n  Globe as GlobeIcon,\r\n  Plus,\r\n  Loader2,\r\n  RotateCcw,\r\n  Play,\r\n  Pause,\r\n  Plane,\r\n  Route,\r\n  Search,\r\n  ZoomIn,\r\n  ZoomOut\r\n} from 'lucide-react'\r\nimport Link from 'next/link'\r\nimport { log } from '@/lib/utils/logger'\r\nimport { cn } from '@/lib/utils'\r\nimport { escapeHtml, escapeAttr } from '@/lib/utils/html-escape'\r\n\r\n// Dynamically import the Globe component to avoid SSR issues\r\nconst Globe = dynamic(() => import('react-globe.gl'), { ssr: false })\r\n\r\ninterface FlightPath {\r\n  startLat: number\r\n  startLng: number\r\n  endLat: number\r\n  endLng: number\r\n  color: string\r\n  year: number\r\n  name: string\r\n}\r\n\r\n// Type definitions for accessing Three.js renderer internals\r\ninterface GlobeInternals {\r\n  scene?: () => unknown\r\n  renderer?: () => ThreeRenderer | undefined\r\n}\r\n\r\ninterface ThreeRenderer {\r\n  setAnimationLoop: (callback: ((time: number) => void) | null) => void\r\n}\r\n\r\ninterface EnhancedGlobeProps {\r\n  className?: string\r\n  initialAlbumId?: string\r\n  initialLat?: number\r\n  initialLng?: number\r\n  filterUserId?: string\r\n}\r\n\r\nexport function EnhancedGlobe({ className, initialAlbumId, initialLat, initialLng, filterUserId }: EnhancedGlobeProps) {\r\n  const globeRef = useRef<GlobeMethods | undefined>(undefined)\r\n  const [globeReady, setGlobeReady] = useState(false)\r\n  const [selectedCluster, setSelectedCluster] = useState<CityCluster | null>(null)\r\n  const [showAlbumModal, setShowAlbumModal] = useState(false)\r\n  const [activeCityId, setActiveCityId] = useState<string | null>(null)\r\n  const [isAutoRotating, setIsAutoRotating] = useState(false) // Disabled by default for better performance\r\n  const [userInteracting, setUserInteracting] = useState(false)\r\n  const [showSearch, setShowSearch] = useState(false)\r\n  const [windowDimensions, setWindowDimensions] = useState({ width: 800, height: 500 })\r\n  const [currentAlbumIndex, setCurrentAlbumIndex] = useState(0)\r\n  const [showStaticConnections, setShowStaticConnections] = useState(true)\r\n  const [progressionMode, setProgressionMode] = useState<'auto' | 'manual'>('auto')\r\n  const [currentLocationIndex, setCurrentLocationIndex] = useState(0)\r\n  const [isJourneyPaused, setIsJourneyPaused] = useState(false)\r\n  const autoRotateRef = useRef<NodeJS.Timeout | null>(null)\r\n  const cameraAnimationRef = useRef<number | null>(null)\r\n  const initialNavigationHandled = useRef(false)\r\n  const globeContainerRef = useRef<HTMLDivElement | null>(null)\r\n  const isVisibleRef = useRef(true)\r\n  const isInViewportRef = useRef(true)\r\n  const rendererRef = useRef<ThreeRenderer | null>(null)\r\n\r\n  // Performance settings - automatically optimized based on hardware detection\r\n  const [performanceMode, setPerformanceMode] = useState<'auto' | 'high' | 'balanced' | 'low'>('auto')\r\n  const [hardwareAcceleration, setHardwareAcceleration] = useState<boolean | null>(null)\r\n\r\n  // Helper function to check if rendering should be active\r\n  const shouldRender = useCallback(() => {\r\n    return isVisibleRef.current && isInViewportRef.current\r\n  }, [])\r\n\r\n  // Page Visibility API - Pause rendering when tab is inactive\r\n  useEffect(() => {\r\n    const handleVisibilityChange = () => {\r\n      const isVisible = !document.hidden\r\n      isVisibleRef.current = isVisible\r\n\r\n      log.info('Page visibility changed', {\r\n        component: 'EnhancedGlobe',\r\n        action: 'visibility-change',\r\n        isVisible\r\n      })\r\n\r\n      if (!isVisible) {\r\n        // Pause all animations when tab is hidden\r\n        if (isAutoRotating) {\r\n          setIsAutoRotating(false)\r\n        }\r\n\r\n        // Stop WebGL rendering\r\n        if (rendererRef.current) {\r\n          rendererRef.current.setAnimationLoop(null)\r\n          log.info('Stopped WebGL rendering (tab hidden)', { component: 'EnhancedGlobe' })\r\n        }\r\n      } else {\r\n        // Resume rendering when tab becomes visible\r\n        if (rendererRef.current && shouldRender()) {\r\n          // Re-enable animation loop\r\n          const globeMethods = globeRef.current as unknown as GlobeInternals\r\n          if (globeMethods.renderer) {\r\n            const renderer = globeMethods.renderer()\r\n            if (renderer) {\r\n              // Restart the throttled animation loop\r\n              log.info('Resumed WebGL rendering (tab visible)', { component: 'EnhancedGlobe' })\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    document.addEventListener('visibilitychange', handleVisibilityChange)\r\n\r\n    return () => {\r\n      document.removeEventListener('visibilitychange', handleVisibilityChange)\r\n    }\r\n  }, [isAutoRotating, shouldRender])\r\n\r\n  // Intersection Observer - Pause rendering when globe is out of viewport\r\n  useEffect(() => {\r\n    if (!globeContainerRef.current) return\r\n\r\n    const observerOptions = {\r\n      root: null,\r\n      rootMargin: '100px', // Start rendering slightly before visible\r\n      threshold: 0.1 // Trigger when 10% visible\r\n    }\r\n\r\n    const handleIntersection = (entries: IntersectionObserverEntry[]) => {\r\n      entries.forEach(entry => {\r\n        const isInViewport = entry.isIntersecting\r\n        isInViewportRef.current = isInViewport\r\n\r\n        log.info('Globe viewport visibility changed', {\r\n          component: 'EnhancedGlobe',\r\n          action: 'viewport-change',\r\n          isInViewport,\r\n          intersectionRatio: entry.intersectionRatio\r\n        })\r\n\r\n        if (!isInViewport) {\r\n          // Pause animations when out of viewport\r\n          if (isAutoRotating) {\r\n            setIsAutoRotating(false)\r\n          }\r\n\r\n          // Stop WebGL rendering\r\n          if (rendererRef.current) {\r\n            rendererRef.current.setAnimationLoop(null)\r\n            log.info('Stopped WebGL rendering (out of viewport)', { component: 'EnhancedGlobe' })\r\n          }\r\n        } else if (shouldRender()) {\r\n          // Resume rendering when back in viewport and tab is visible\r\n          if (rendererRef.current) {\r\n            log.info('Resumed WebGL rendering (in viewport)', { component: 'EnhancedGlobe' })\r\n          }\r\n        }\r\n      })\r\n    }\r\n\r\n    const observer = new IntersectionObserver(handleIntersection, observerOptions)\r\n    observer.observe(globeContainerRef.current)\r\n\r\n    return () => {\r\n      observer.disconnect()\r\n    }\r\n  }, [isAutoRotating, shouldRender])\r\n\r\n  // Detect hardware acceleration\r\n  useEffect(() => {\r\n    const detectHardwareAcceleration = () => {\r\n      try {\r\n        const canvas = document.createElement('canvas')\r\n        const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl')\r\n\r\n        if (!gl) {\r\n          setHardwareAcceleration(false)\r\n          // Auto-switch to low mode for better performance\r\n          setPerformanceMode('low')\r\n          log.warn('WebGL not available, using low performance mode')\r\n          return\r\n        }\r\n\r\n        const debugInfo = (gl as WebGLRenderingContext).getExtension('WEBGL_debug_renderer_info')\r\n        if (debugInfo) {\r\n          const renderer = (gl as WebGLRenderingContext).getParameter(debugInfo.UNMASKED_RENDERER_WEBGL)\r\n          // Check if using software renderer\r\n          const isSoftware = /SwiftShader|llvmpipe|Microsoft Basic Render Driver/i.test(renderer)\r\n          setHardwareAcceleration(!isSoftware)\r\n\r\n          if (isSoftware) {\r\n            // Auto-switch to low mode for software rendering\r\n            setPerformanceMode('low')\r\n            log.warn('Software rendering detected, using low performance mode', { renderer })\r\n          } else {\r\n            log.info('Hardware acceleration detected', { renderer })\r\n          }\r\n        } else {\r\n          // Can't detect, assume hardware acceleration is available\r\n          setHardwareAcceleration(true)\r\n        }\r\n      } catch (error) {\r\n        log.error('Failed to detect hardware acceleration', { error })\r\n        setHardwareAcceleration(true)\r\n      }\r\n    }\r\n\r\n    detectHardwareAcceleration()\r\n  }, [])\r\n\r\n\r\n  // Handle window resize for responsive globe - Heavily throttled for performance\r\n  useEffect(() => {\r\n    let resizeTimeout: NodeJS.Timeout | null = null\r\n    let idleCallbackId: number | null = null\r\n\r\n    const updateDimensions = () => {\r\n      const width = Math.min(window.innerWidth * 0.9, 1200)\r\n      const height = window.innerWidth < 640 ? Math.max(window.innerHeight * 0.6, 500) :\r\n                    window.innerWidth < 1024 ? Math.max(window.innerHeight * 0.65, 650) :\r\n                    window.innerWidth < 1440 ? Math.max(window.innerHeight * 0.75, 750) :\r\n                    Math.max(window.innerHeight * 0.8, 800)\r\n\r\n      // Only update if dimensions changed significantly (>10px to avoid jitter)\r\n      setWindowDimensions(prev => {\r\n        if (Math.abs(prev.width - width) > 10 || Math.abs(prev.height - height) > 10) {\r\n          return { width, height }\r\n        }\r\n        return prev\r\n      })\r\n    }\r\n\r\n    // Use requestIdleCallback for non-critical dimension updates\r\n    const throttledResize = () => {\r\n      if (resizeTimeout) {\r\n        clearTimeout(resizeTimeout)\r\n      }\r\n      if (idleCallbackId) {\r\n        cancelIdleCallback(idleCallbackId)\r\n      }\r\n\r\n      // Debounce with timeout, then schedule update during idle time\r\n      resizeTimeout = setTimeout(() => {\r\n        if (typeof requestIdleCallback !== 'undefined') {\r\n          // Use requestIdleCallback when available (better CPU efficiency)\r\n          idleCallbackId = requestIdleCallback(() => {\r\n            updateDimensions()\r\n            idleCallbackId = null\r\n          }, { timeout: 1000 })\r\n        } else {\r\n          // Fallback for browsers without requestIdleCallback\r\n          updateDimensions()\r\n        }\r\n      }, 750)\r\n    }\r\n\r\n    updateDimensions()\r\n    window.addEventListener('resize', throttledResize, { passive: true })\r\n    return () => {\r\n      window.removeEventListener('resize', throttledResize)\r\n      if (resizeTimeout) clearTimeout(resizeTimeout)\r\n      if (idleCallbackId && typeof cancelIdleCallback !== 'undefined') {\r\n        cancelIdleCallback(idleCallbackId)\r\n      }\r\n    }\r\n  }, [])\r\n\r\n\r\n  // Calculate effective performance mode\r\n  const effectivePerformanceMode = useMemo(() => {\r\n    if (performanceMode !== 'auto') return performanceMode\r\n    // Auto mode: use low if no hardware acceleration, balanced otherwise\r\n    return hardwareAcceleration === false ? 'low' : 'balanced'\r\n  }, [performanceMode, hardwareAcceleration])\r\n\r\n  // Performance settings based on mode\r\n  const performanceConfig = useMemo(() => {\r\n    switch (effectivePerformanceMode) {\r\n      case 'high':\r\n        return {\r\n          showAtmosphere: true,\r\n          atmosphereOpacity: 0.8,\r\n          atmosphereAltitude: 0.25,\r\n          arcStroke: 3,\r\n          showArcs: true,\r\n          pinSize: 1.2,\r\n          maxPins: 1000\r\n        }\r\n      case 'balanced':\r\n        return {\r\n          showAtmosphere: true,\r\n          atmosphereOpacity: 0.6,\r\n          atmosphereAltitude: 0.15,\r\n          arcStroke: 2,\r\n          showArcs: true,\r\n          pinSize: 1.0,\r\n          maxPins: 500\r\n        }\r\n      case 'low':\r\n        return {\r\n          showAtmosphere: false,\r\n          atmosphereOpacity: 0,\r\n          atmosphereAltitude: 0,\r\n          arcStroke: 1,\r\n          showArcs: false,\r\n          pinSize: 0.8,\r\n          maxPins: 200\r\n        }\r\n      default:\r\n        return {\r\n          showAtmosphere: true,\r\n          atmosphereOpacity: 0.6,\r\n          atmosphereAltitude: 0.15,\r\n          arcStroke: 2,\r\n          showArcs: true,\r\n          pinSize: 1.0,\r\n          maxPins: 500\r\n        }\r\n    }\r\n  }, [effectivePerformanceMode])\r\n\r\n  // Travel timeline hook\r\n  const {\r\n    availableYears,\r\n    loading: timelineLoading,\r\n    error: timelineError,\r\n    selectedYear,\r\n    setSelectedYear,\r\n    refreshData,\r\n    getYearData\r\n  } = useTravelTimeline(filterUserId)\r\n\r\n  // Get locations - show all years if no year is selected, otherwise filter by year\r\n  const locations = useMemo(() => {\r\n    if (selectedYear) {\r\n      // Filter by selected year\r\n      const yearData = getYearData(selectedYear)\r\n      return yearData?.locations || []\r\n    } else {\r\n      // Show all years - combine all locations from all years\r\n      const allLocations: TravelLocation[] = []\r\n      availableYears.forEach(year => {\r\n        const yearData = getYearData(year)\r\n        if (yearData?.locations) {\r\n          allLocations.push(...yearData.locations)\r\n        }\r\n      })\r\n      return allLocations\r\n    }\r\n  }, [selectedYear, availableYears, getYearData])\r\n\r\n  // Stable flight animation callbacks\r\n  const handleSegmentComplete = useCallback((location: TravelLocation) => {\r\n    setActiveCityId(location.id)\r\n\r\n    // Update current location index\r\n    const locationIndex = locations.findIndex(loc => loc.id === location.id)\r\n    if (locationIndex !== -1) {\r\n      setCurrentLocationIndex(locationIndex)\r\n    }\r\n\r\n    // In manual mode, pause the journey at each location\r\n    if (progressionMode === 'manual') {\r\n      setIsJourneyPaused(true)\r\n      if (isPlaying) {\r\n        pause()\r\n      }\r\n    }\r\n\r\n    log.debug('Flight animation segment completed', {\r\n      component: 'EnhancedGlobe',\r\n      action: 'segment-complete',\r\n      locationId: location.id,\r\n      locationName: location.name,\r\n      progressionMode,\r\n      locationIndex\r\n    })\r\n\r\n    // Show album when flight segment completes\r\n    const delay = progressionMode === 'manual' ? 500 : 1500\r\n    setTimeout(() => {\r\n      // Find albums and photos for this location\r\n      const locationAlbums = location.albums || []\r\n      const locationPhotos = location.photos || []\r\n\r\n      if (locationAlbums.length > 0) {\r\n        // Create a cluster for this location to show in the modal with unique ID\r\n        const cluster: CityCluster = {\r\n          id: `location-${location.id}-${Date.now()}`,\r\n          latitude: location.latitude,\r\n          longitude: location.longitude,\r\n          cities: [{\r\n            id: location.id,\r\n            name: location.name,\r\n            latitude: location.latitude,\r\n            longitude: location.longitude,\r\n            albumCount: locationAlbums.length,\r\n            photoCount: locationPhotos.length,\r\n            visitDate: location.visitDate.toISOString(),\r\n            isVisited: true,\r\n            isActive: true,\r\n            favoritePhotoUrls: locationAlbums.flatMap(album => album.favoritePhotoUrls || []).slice(0, 3),\r\n            coverPhotoUrl: locationAlbums[0]?.coverPhotoUrl,\r\n            previewPhotoUrls: locationPhotos.map(p => p.url).filter((url): url is string => !!url)\r\n          }],\r\n          totalAlbums: locationAlbums.length,\r\n          totalPhotos: locationPhotos.length,\r\n          radius: 1\r\n        }\r\n\r\n        // Show the album modal\r\n        setSelectedCluster(cluster)\r\n        setShowAlbumModal(true)\r\n\r\n        log.debug('Showing album for completed flight segment', {\r\n          component: 'EnhancedGlobe',\r\n          action: 'show-album',\r\n          locationId: location.id,\r\n          albumCount: locationAlbums.length,\r\n          photoCount: locationPhotos.length,\r\n          progressionMode\r\n        })\r\n      }\r\n    }, delay)\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [progressionMode, locations])\r\n\r\n  // Animation complete callback (defined after locations)\r\n  const handleAnimationComplete = useCallback(() => {\r\n    // Focus on the final destination when animation completes\r\n    if (locations.length > 0) {\r\n      const finalDestination = locations[locations.length - 1]\r\n      // Direct globe manipulation to avoid dependency issues\r\n      if (globeRef.current) {\r\n        const targetPOV = {\r\n          lat: finalDestination.latitude,\r\n          lng: finalDestination.longitude,\r\n          altitude: 1.5\r\n        }\r\n\r\n        // Simple animation to final destination\r\n        globeRef.current.pointOfView(targetPOV, 2000)\r\n      }\r\n      setActiveCityId(finalDestination.id)\r\n    }\r\n    log.info('Flight animation completed successfully', {\r\n      component: 'EnhancedGlobe',\r\n      action: 'animation-complete'\r\n    })\r\n  }, [locations])\r\n\r\n  const handleAnimationError = useCallback((error: string) => {\r\n    log.error('Flight animation failed', {\r\n      component: 'EnhancedGlobe',\r\n      action: 'animation-error',\r\n      error: error\r\n    })\r\n  }, [])\r\n\r\n  // Flight animation hook (defined after all callbacks)\r\n  const {\r\n    isPlaying,\r\n    currentFlightState,\r\n    cameraPosition,\r\n    destinationCameraPosition,\r\n    play,\r\n    pause,\r\n    reset,\r\n    setLocations\r\n  } = useFlightAnimation({\r\n    autoPlay: false,\r\n    defaultSpeed: 1,\r\n    cameraFollowsPlane: true,\r\n    onSegmentComplete: handleSegmentComplete,\r\n    onAnimationComplete: handleAnimationComplete,\r\n    onError: handleAnimationError\r\n  })\r\n\r\n  // Helper function to properly interpolate longitude (handling 180/-180 boundary)\r\n  const interpolateLongitude = useCallback((start: number, end: number, progress: number) => {\r\n    const diff = end - start\r\n    const wrappedDiff = diff > 180 ? diff - 360 : diff < -180 ? diff + 360 : diff\r\n    return start + wrappedDiff * progress\r\n  }, [])\r\n\r\n  // Calculate optimal camera position for locations\r\n  const calculateOptimalCameraPosition = useCallback((locations: TravelLocation[]) => {\r\n    if (locations.length === 0) return { lat: 0, lng: 0, altitude: 2.5 }\r\n    if (locations.length === 1) {\r\n      return {\r\n        lat: locations[0].latitude,\r\n        lng: locations[0].longitude,\r\n        altitude: 1.8\r\n      }\r\n    }\r\n\r\n    // Calculate bounds\r\n    const lats = locations.map(loc => loc.latitude)\r\n    const lngs = locations.map(loc => loc.longitude)\r\n    const minLat = Math.min(...lats)\r\n    const maxLat = Math.max(...lats)\r\n    const minLng = Math.min(...lngs)\r\n    const maxLng = Math.max(...lngs)\r\n\r\n    // Calculate center and span\r\n    const centerLat = (minLat + maxLat) / 2\r\n    const centerLng = (minLng + maxLng) / 2\r\n    const latSpan = maxLat - minLat\r\n    const lngSpan = maxLng - minLng\r\n    const maxSpan = Math.max(latSpan, lngSpan)\r\n\r\n    // Calculate appropriate altitude based on span\r\n    let altitude = 2.5\r\n    if (maxSpan < 5) altitude = 2.0\r\n    else if (maxSpan < 15) altitude = 2.2\r\n    else if (maxSpan < 30) altitude = 2.5\r\n    else if (maxSpan < 60) altitude = 3.0\r\n    else altitude = 3.5\r\n\r\n    return {\r\n      lat: centerLat,\r\n      lng: centerLng,\r\n      altitude\r\n    }\r\n  }, [])\r\n\r\n  // Enhanced camera animation function\r\n  const animateCameraToPosition = useCallback((targetPOV: { lat: number; lng: number; altitude: number }, duration: number = 1000, easing: string = 'easeInOutQuad') => {\r\n    if (!globeRef.current) return\r\n\r\n    if (cameraAnimationRef.current) {\r\n      cancelAnimationFrame(cameraAnimationRef.current)\r\n    }\r\n\r\n    const startPOV = globeRef.current.pointOfView()\r\n    const startTime = Date.now()\r\n\r\n    const easingFunctions = {\r\n      linear: (t: number) => t,\r\n      easeInOutQuad: (t: number) => t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t,\r\n      easeInOutCubic: (t: number) => t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1,\r\n      easeInOutExpo: (t: number) => t === 0 ? 0 : t === 1 ? 1 : t < 0.5 ? Math.pow(2, 20 * t - 10) / 2 : (2 - Math.pow(2, -20 * t + 10)) / 2\r\n    }\r\n\r\n    const easeFn = easingFunctions[easing as keyof typeof easingFunctions] || easingFunctions.easeInOutQuad\r\n\r\n    const animate = () => {\r\n      const elapsed = Date.now() - startTime\r\n      const progress = Math.min(elapsed / duration, 1)\r\n      const easedProgress = easeFn(progress)\r\n\r\n      // Interpolate position with proper longitude wrapping\r\n      const interpolatedPOV = {\r\n        lat: startPOV.lat + (targetPOV.lat - startPOV.lat) * easedProgress,\r\n        lng: interpolateLongitude(startPOV.lng, targetPOV.lng, easedProgress),\r\n        altitude: startPOV.altitude + (targetPOV.altitude - startPOV.altitude) * easedProgress\r\n      }\r\n\r\n      if (globeRef.current) {\r\n        globeRef.current.pointOfView(interpolatedPOV, 0)\r\n      }\r\n\r\n      if (progress < 1) {\r\n        cameraAnimationRef.current = requestAnimationFrame(animate)\r\n      }\r\n    }\r\n\r\n    animate()\r\n  }, [interpolateLongitude])\r\n\r\n  // UI control handlers\r\n  const handleYearChange = useCallback((year: number) => {\r\n    setSelectedYear(year)\r\n    setActiveCityId(null)\r\n    setSelectedCluster(null)\r\n    reset()\r\n\r\n    // Smooth transition to optimal view for new year's locations\r\n    setTimeout(() => {\r\n      const yearData = getYearData(year)\r\n      if (yearData && yearData.locations.length > 0) {\r\n        const optimalPosition = calculateOptimalCameraPosition(yearData.locations)\r\n        animateCameraToPosition(optimalPosition, 2000, 'easeInOutExpo')\r\n      }\r\n    }, 500)\r\n  }, [setSelectedYear, setActiveCityId, setSelectedCluster, reset, getYearData, calculateOptimalCameraPosition, animateCameraToPosition])\r\n\r\n  const handlePlayPause = useCallback(() => {\r\n    if (isPlaying) {\r\n      pause()\r\n      // Don't lock user interaction - allow free movement after pausing\r\n      setUserInteracting(false)\r\n    } else {\r\n      play()\r\n    }\r\n  }, [isPlaying, pause, play])\r\n\r\n  const handleReset = useCallback(() => {\r\n    reset()\r\n    setActiveCityId(null)\r\n    setSelectedCluster(null)\r\n    setCurrentLocationIndex(0)\r\n    setIsJourneyPaused(false)\r\n    setIsAutoRotating(true)\r\n    if (globeRef.current) {\r\n      animateCameraToPosition({ lat: 0, lng: 0, altitude: 2.5 }, 1500, 'easeInOutExpo')\r\n    }\r\n  }, [reset, setActiveCityId, setSelectedCluster, setIsAutoRotating, animateCameraToPosition])\r\n\r\n  // Manual progression controls\r\n  const advanceToNextLocation = useCallback(() => {\r\n    if (currentLocationIndex >= locations.length - 1) {\r\n      log.warn('Cannot advance - already at last location', {\r\n        component: 'EnhancedGlobe',\r\n        currentIndex: currentLocationIndex,\r\n        totalLocations: locations.length\r\n      })\r\n      return\r\n    }\r\n\r\n    const nextIndex = currentLocationIndex + 1\r\n    const nextLocation = locations[nextIndex]\r\n\r\n    if (!nextLocation) {\r\n      log.error('Next location not found', { nextIndex, totalLocations: locations.length })\r\n      return\r\n    }\r\n\r\n    // Update the modal with the new location\r\n    const locationAlbums = nextLocation.albums || []\r\n    const locationPhotos = nextLocation.photos || []\r\n\r\n    // Create a new cluster object with unique ID to force re-render\r\n    const cluster: CityCluster = {\r\n      id: `location-${nextLocation.id}-${Date.now()}`,\r\n      latitude: nextLocation.latitude,\r\n      longitude: nextLocation.longitude,\r\n      cities: [{\r\n        id: nextLocation.id,\r\n        name: nextLocation.name,\r\n        latitude: nextLocation.latitude,\r\n        longitude: nextLocation.longitude,\r\n        albumCount: locationAlbums.length,\r\n        photoCount: locationPhotos.length,\r\n        visitDate: nextLocation.visitDate.toISOString(),\r\n        isVisited: true,\r\n        isActive: true,\r\n        favoritePhotoUrls: locationAlbums.flatMap(album => album.favoritePhotoUrls || []).slice(0, 3),\r\n        coverPhotoUrl: locationAlbums[0]?.coverPhotoUrl,\r\n        previewPhotoUrls: locationPhotos.map(p => p.url).filter((url): url is string => !!url)\r\n      }],\r\n      totalAlbums: locationAlbums.length,\r\n      totalPhotos: locationPhotos.length,\r\n      radius: 1\r\n    }\r\n\r\n    // Use flushSync to ensure state updates complete immediately\r\n    flushSync(() => {\r\n      setCurrentLocationIndex(nextIndex)\r\n      setIsJourneyPaused(false)\r\n      setActiveCityId(nextLocation.id)\r\n      setSelectedCluster(cluster)\r\n      setShowAlbumModal(true)\r\n    })\r\n\r\n    // Animate camera to new location\r\n    if (globeRef.current) {\r\n      animateCameraToPosition({\r\n        lat: nextLocation.latitude,\r\n        lng: nextLocation.longitude,\r\n        altitude: 1.5\r\n      }, 1200, 'easeInOutCubic')\r\n    }\r\n\r\n    if (progressionMode === 'auto' && !isPlaying) {\r\n      play()\r\n    }\r\n\r\n    log.info('Advanced to next location', {\r\n      component: 'EnhancedGlobe',\r\n      action: 'advance-next',\r\n      nextIndex,\r\n      locationName: nextLocation.name,\r\n      photoCount: locationPhotos.length,\r\n      albumCount: locationAlbums.length\r\n    })\r\n  }, [currentLocationIndex, locations, progressionMode, isPlaying, play, animateCameraToPosition, setShowAlbumModal])\r\n\r\n  const goToPreviousLocation = useCallback(() => {\r\n    if (currentLocationIndex <= 0) {\r\n      log.warn('Cannot go back - already at first location', {\r\n        component: 'EnhancedGlobe',\r\n        currentIndex: currentLocationIndex\r\n      })\r\n      return\r\n    }\r\n\r\n    const prevIndex = currentLocationIndex - 1\r\n    const prevLocation = locations[prevIndex]\r\n\r\n    if (!prevLocation) {\r\n      log.error('Previous location not found', { prevIndex, totalLocations: locations.length })\r\n      return\r\n    }\r\n\r\n    // Update the modal with the previous location\r\n    const locationAlbums = prevLocation.albums || []\r\n    const locationPhotos = prevLocation.photos || []\r\n\r\n    // Create a new cluster object with unique ID to force re-render\r\n    const cluster: CityCluster = {\r\n      id: `location-${prevLocation.id}-${Date.now()}`,\r\n      latitude: prevLocation.latitude,\r\n      longitude: prevLocation.longitude,\r\n      cities: [{\r\n        id: prevLocation.id,\r\n        name: prevLocation.name,\r\n        latitude: prevLocation.latitude,\r\n        longitude: prevLocation.longitude,\r\n        albumCount: locationAlbums.length,\r\n        photoCount: locationPhotos.length,\r\n        visitDate: prevLocation.visitDate.toISOString(),\r\n        isVisited: true,\r\n        isActive: true,\r\n        favoritePhotoUrls: locationAlbums.flatMap(album => album.favoritePhotoUrls || []).slice(0, 3),\r\n        coverPhotoUrl: locationAlbums[0]?.coverPhotoUrl,\r\n        previewPhotoUrls: locationPhotos.map(p => p.url).filter((url): url is string => !!url)\r\n      }],\r\n      totalAlbums: locationAlbums.length,\r\n      totalPhotos: locationPhotos.length,\r\n      radius: 1\r\n    }\r\n\r\n    // Use flushSync to ensure state updates complete immediately\r\n    flushSync(() => {\r\n      setCurrentLocationIndex(prevIndex)\r\n      setIsJourneyPaused(false)\r\n      setActiveCityId(prevLocation.id)\r\n      setSelectedCluster(cluster)\r\n      setShowAlbumModal(true)\r\n    })\r\n\r\n    // Animate camera to previous location\r\n    if (globeRef.current) {\r\n      animateCameraToPosition({\r\n        lat: prevLocation.latitude,\r\n        lng: prevLocation.longitude,\r\n        altitude: 1.5\r\n      }, 1200, 'easeInOutCubic')\r\n    }\r\n\r\n    if (progressionMode === 'auto' && !isPlaying) {\r\n      play()\r\n    }\r\n\r\n    log.info('Moved to previous location', {\r\n      component: 'EnhancedGlobe',\r\n      action: 'goto-previous',\r\n      prevIndex,\r\n      locationName: prevLocation.name,\r\n      photoCount: locationPhotos.length,\r\n      albumCount: locationAlbums.length\r\n    })\r\n  }, [currentLocationIndex, locations, progressionMode, isPlaying, play, animateCameraToPosition, setShowAlbumModal])\r\n\r\n  const resumeJourney = useCallback(() => {\r\n    if (isJourneyPaused && progressionMode === 'manual') {\r\n      setIsJourneyPaused(false)\r\n      play()\r\n\r\n      log.debug('Resumed journey from manual pause', {\r\n        component: 'EnhancedGlobe',\r\n        action: 'resume-journey',\r\n        currentLocationIndex\r\n      })\r\n    }\r\n  }, [isJourneyPaused, progressionMode, play, currentLocationIndex])\r\n\r\n  const toggleProgressionMode = useCallback(() => {\r\n    const newMode = progressionMode === 'auto' ? 'manual' : 'auto'\r\n    setProgressionMode(newMode)\r\n\r\n    // If switching to auto mode while paused, resume\r\n    if (newMode === 'auto' && isJourneyPaused) {\r\n      setIsJourneyPaused(false)\r\n      if (!isPlaying && currentLocationIndex < locations.length - 1) {\r\n        play()\r\n      }\r\n    }\r\n\r\n    log.debug('Toggled progression mode', {\r\n      component: 'EnhancedGlobe',\r\n      action: 'toggle-progression-mode',\r\n      newMode,\r\n      wasJourneyPaused: isJourneyPaused\r\n    })\r\n  }, [progressionMode, isJourneyPaused, isPlaying, currentLocationIndex, locations, play])\r\n\r\n\r\n  // Create chronological album timeline across all years\r\n  const chronologicalAlbums = useMemo(() => {\r\n    const allAlbums: Array<{\r\n      albumId: string\r\n      locationId: string\r\n      locationName: string\r\n      year: number\r\n      visitDate: Date\r\n      chronologicalIndex: number\r\n      latitude: number\r\n      longitude: number\r\n      albumData: Album\r\n      coverPhotoUrl?: string\r\n      photoCount: number\r\n    }> = []\r\n\r\n    // Collect all albums from all years\r\n    availableYears.forEach(year => {\r\n      const yearData = getYearData(year)\r\n      if (yearData && yearData.locations) {\r\n        yearData.locations.forEach(location => {\r\n          location.albums.forEach((album) => {\r\n            allAlbums.push({\r\n              albumId: album.id,\r\n              locationId: location.id,\r\n              locationName: location.name,\r\n              year: year,\r\n              visitDate: location.visitDate,\r\n              chronologicalIndex: 0, // Will be set after sorting\r\n              latitude: location.latitude,\r\n              longitude: location.longitude,\r\n              albumData: album,\r\n              coverPhotoUrl: album.coverPhotoUrl,\r\n              photoCount: album.photoCount || location.photos.length || 0\r\n            })\r\n          })\r\n        })\r\n      }\r\n    })\r\n\r\n    // Sort by visit date chronologically\r\n    allAlbums.sort((a, b) => a.visitDate.getTime() - b.visitDate.getTime())\r\n\r\n    // Set chronological indices\r\n    allAlbums.forEach((album, index) => {\r\n      album.chronologicalIndex = index\r\n    })\r\n\r\n    return allAlbums\r\n  }, [availableYears, getYearData])\r\n\r\n  // Get current album based on currentAlbumIndex\r\n  const currentAlbum = chronologicalAlbums[currentAlbumIndex] || null\r\n\r\n  // Album navigation functions\r\n  const navigateToNextAlbum = useCallback(() => {\r\n    if (currentAlbumIndex < chronologicalAlbums.length - 1) {\r\n      const newIndex = currentAlbumIndex + 1\r\n      const nextAlbum = chronologicalAlbums[newIndex]\r\n\r\n      setCurrentAlbumIndex(newIndex)\r\n\r\n      // BUGFIX: Never auto-switch year filter when navigating between albums\r\n      // Let users manually control the year filter - don't change it automatically\r\n      // The chronologicalAlbums array contains ALL albums across all years, so navigation works regardless of filter\r\n\r\n      // Navigate to the album's location and show it\r\n      setTimeout(() => {\r\n        setActiveCityId(nextAlbum.locationId)\r\n        if (globeRef.current) {\r\n          animateCameraToPosition({\r\n            lat: nextAlbum.latitude,\r\n            lng: nextAlbum.longitude,\r\n            altitude: 1.5\r\n          }, 1200, 'easeInOutCubic')\r\n        }\r\n\r\n        // Show the album modal\r\n        const cluster: CityCluster = {\r\n          id: `album-${nextAlbum.albumId}`,\r\n          latitude: nextAlbum.latitude,\r\n          longitude: nextAlbum.longitude,\r\n          cities: [{\r\n            id: nextAlbum.locationId,\r\n            name: nextAlbum.locationName,\r\n            latitude: nextAlbum.latitude,\r\n            longitude: nextAlbum.longitude,\r\n            albumCount: 1,\r\n            photoCount: nextAlbum.photoCount,\r\n            visitDate: nextAlbum.visitDate.toISOString(),\r\n            isVisited: true,\r\n            isActive: true,\r\n            favoritePhotoUrls: [],\r\n            coverPhotoUrl: nextAlbum.coverPhotoUrl\r\n          }],\r\n          totalAlbums: 1,\r\n          totalPhotos: nextAlbum.photoCount,\r\n          radius: 1\r\n        }\r\n\r\n        setSelectedCluster(cluster)\r\n        setShowAlbumModal(true)\r\n      }, 100)\r\n    }\r\n  }, [currentAlbumIndex, chronologicalAlbums, selectedYear, setSelectedYear, animateCameraToPosition])\r\n\r\n  const navigateToPreviousAlbum = useCallback(() => {\r\n    if (currentAlbumIndex > 0) {\r\n      const newIndex = currentAlbumIndex - 1\r\n      const prevAlbum = chronologicalAlbums[newIndex]\r\n\r\n      setCurrentAlbumIndex(newIndex)\r\n\r\n      // BUGFIX: Never auto-switch year filter when navigating between albums\r\n      // Let users manually control the year filter - don't change it automatically\r\n      // The chronologicalAlbums array contains ALL albums across all years, so navigation works regardless of filter\r\n\r\n      // Navigate to the album's location and show it\r\n      setTimeout(() => {\r\n        setActiveCityId(prevAlbum.locationId)\r\n        if (globeRef.current) {\r\n          animateCameraToPosition({\r\n            lat: prevAlbum.latitude,\r\n            lng: prevAlbum.longitude,\r\n            altitude: 1.5\r\n          }, 1200, 'easeInOutCubic')\r\n        }\r\n\r\n        // Show the album modal\r\n        const cluster: CityCluster = {\r\n          id: `album-${prevAlbum.albumId}`,\r\n          latitude: prevAlbum.latitude,\r\n          longitude: prevAlbum.longitude,\r\n          cities: [{\r\n            id: prevAlbum.locationId,\r\n            name: prevAlbum.locationName,\r\n            latitude: prevAlbum.latitude,\r\n            longitude: prevAlbum.longitude,\r\n            albumCount: 1,\r\n            photoCount: prevAlbum.photoCount,\r\n            visitDate: prevAlbum.visitDate.toISOString(),\r\n            isVisited: true,\r\n            isActive: true,\r\n            favoritePhotoUrls: [],\r\n            coverPhotoUrl: prevAlbum.coverPhotoUrl\r\n          }],\r\n          totalAlbums: 1,\r\n          totalPhotos: prevAlbum.photoCount,\r\n          radius: 1\r\n        }\r\n\r\n        setSelectedCluster(cluster)\r\n        setShowAlbumModal(true)\r\n      }, 100)\r\n    }\r\n  }, [currentAlbumIndex, chronologicalAlbums, selectedYear, setSelectedYear, animateCameraToPosition])\r\n\r\n  const showCurrentAlbum = useCallback(() => {\r\n    if (currentAlbum) {\r\n      // Navigate to the current album's location and show it\r\n      setActiveCityId(currentAlbum.locationId)\r\n\r\n      // Switch to the album's year if different\r\n      if (currentAlbum.year !== selectedYear) {\r\n        setSelectedYear(currentAlbum.year)\r\n      }\r\n\r\n      if (globeRef.current) {\r\n        animateCameraToPosition({\r\n          lat: currentAlbum.latitude,\r\n          lng: currentAlbum.longitude,\r\n          altitude: 1.5\r\n        }, 1200, 'easeInOutCubic')\r\n      }\r\n\r\n      // Show the album modal\r\n      const cluster: CityCluster = {\r\n        id: `album-${currentAlbum.albumId}`,\r\n        latitude: currentAlbum.latitude,\r\n        longitude: currentAlbum.longitude,\r\n        cities: [{\r\n          id: currentAlbum.locationId,\r\n          name: currentAlbum.locationName,\r\n          latitude: currentAlbum.latitude,\r\n          longitude: currentAlbum.longitude,\r\n          albumCount: 1,\r\n          photoCount: currentAlbum.photoCount,\r\n          visitDate: currentAlbum.visitDate.toISOString(),\r\n          isVisited: true,\r\n          isActive: true,\r\n          favoritePhotoUrls: [],\r\n          coverPhotoUrl: currentAlbum.coverPhotoUrl\r\n        }],\r\n        totalAlbums: 1,\r\n        totalPhotos: currentAlbum.photoCount,\r\n        radius: 1\r\n      }\r\n\r\n      setSelectedCluster(cluster)\r\n      setShowAlbumModal(true)\r\n    }\r\n  }, [currentAlbum, selectedYear, setSelectedYear, animateCameraToPosition])\r\n\r\n  // Stable references for keyboard shortcuts to prevent infinite loops\r\n  const navigateToNextAlbumRef = useRef(navigateToNextAlbum)\r\n  const navigateToPreviousAlbumRef = useRef(navigateToPreviousAlbum)\r\n  const showCurrentAlbumRef = useRef(showCurrentAlbum)\r\n  const currentAlbumRef = useRef(currentAlbum)\r\n  const chronologicalAlbumsRef = useRef(chronologicalAlbums)\r\n\r\n  // Update refs when functions change\r\n  useEffect(() => {\r\n    navigateToNextAlbumRef.current = navigateToNextAlbum\r\n    navigateToPreviousAlbumRef.current = navigateToPreviousAlbum\r\n    showCurrentAlbumRef.current = showCurrentAlbum\r\n    currentAlbumRef.current = currentAlbum\r\n    chronologicalAlbumsRef.current = chronologicalAlbums\r\n  }, [navigateToNextAlbum, navigateToPreviousAlbum, showCurrentAlbum, currentAlbum, chronologicalAlbums])\r\n\r\n  // Stable refs for keyboard shortcuts\r\n  const showSearchRef = useRef(showSearch)\r\n  const selectedYearRef = useRef(selectedYear)\r\n  const availableYearsRef = useRef(availableYears)\r\n  const progressionModeRef = useRef(progressionMode)\r\n  const isJourneyPausedRef = useRef(isJourneyPaused)\r\n  const locationsRef = useRef(locations)\r\n\r\n  // Update refs when values change\r\n  useEffect(() => {\r\n    showSearchRef.current = showSearch\r\n    selectedYearRef.current = selectedYear\r\n    availableYearsRef.current = availableYears\r\n    progressionModeRef.current = progressionMode\r\n    isJourneyPausedRef.current = isJourneyPaused\r\n    locationsRef.current = locations\r\n  }, [showSearch, selectedYear, availableYears, progressionMode, isJourneyPaused, locations])\r\n\r\n  // Keyboard shortcuts with passive listener - optimized with refs to eliminate dependencies\r\n  useEffect(() => {\r\n    const handleKeyPress = (event: KeyboardEvent) => {\r\n      // Don't trigger shortcuts when user is typing in inputs\r\n      if (event.target instanceof HTMLInputElement || event.target instanceof HTMLTextAreaElement) {\r\n        return\r\n      }\r\n\r\n      const key = event.key.toLowerCase()\r\n\r\n      // Early return for common non-shortcut keys - expanded list\r\n      if (key.length > 1 && !['escape', 'arrowleft', 'arrowright', 'space'].includes(key)) {\r\n        return\r\n      }\r\n\r\n      switch (key) {\r\n        case ' ':\r\n          event.preventDefault()\r\n          if (locationsRef.current.length > 1) {\r\n            handlePlayPause()\r\n          } else if (locationsRef.current.length === 1) {\r\n            // For single locations, open the album modal to show photos\r\n            const location = locationsRef.current[0]\r\n            const locationPhotos = location.photos || []\r\n\r\n            const cluster: CityCluster = {\r\n              id: `single-${location.id}-${Date.now()}`,\r\n              latitude: location.latitude,\r\n              longitude: location.longitude,\r\n              cities: [{\r\n                id: location.id,\r\n                name: location.name,\r\n                latitude: location.latitude,\r\n                longitude: location.longitude,\r\n                albumCount: location.albums.length,\r\n                photoCount: locationPhotos.length,\r\n                visitDate: location.visitDate.toISOString(),\r\n                isVisited: true,\r\n                isActive: true,\r\n                favoritePhotoUrls: location.albums[0]?.favoritePhotoUrls || [],\r\n                coverPhotoUrl: location.albums[0]?.coverPhotoUrl,\r\n                previewPhotoUrls: locationPhotos.map(p => p.url).filter((url): url is string => !!url)\r\n              }],\r\n              totalAlbums: location.albums.length,\r\n              totalPhotos: locationPhotos.length,\r\n              radius: 1\r\n            }\r\n            setSelectedCluster(cluster)\r\n            setShowAlbumModal(true)\r\n          }\r\n          break\r\n        case 'r':\r\n          event.preventDefault()\r\n          handleReset()\r\n          break\r\n        case 's':\r\n          event.preventDefault()\r\n          setShowSearch(!showSearchRef.current)\r\n          break\r\n        case 'escape':\r\n          event.preventDefault()\r\n          setShowSearch(false)\r\n          setShowAlbumModal(false)\r\n          break\r\n        case 'm':\r\n          event.preventDefault()\r\n          if (locationsRef.current.length > 1) {\r\n            toggleProgressionMode()\r\n          }\r\n          break\r\n        case 'arrowleft':\r\n          event.preventDefault()\r\n          if (selectedYearRef.current && availableYearsRef.current.length > 0) {\r\n            const currentIndex = availableYearsRef.current.indexOf(selectedYearRef.current)\r\n            if (currentIndex > 0) {\r\n              handleYearChange(availableYearsRef.current[currentIndex - 1])\r\n            }\r\n          }\r\n          break\r\n        case 'arrowright':\r\n          event.preventDefault()\r\n          if (selectedYearRef.current && availableYearsRef.current.length > 0) {\r\n            const currentIndex = availableYearsRef.current.indexOf(selectedYearRef.current)\r\n            if (currentIndex < availableYearsRef.current.length - 1) {\r\n              handleYearChange(availableYearsRef.current[currentIndex + 1])\r\n            }\r\n          }\r\n          break\r\n        case 'n':\r\n          event.preventDefault()\r\n          if (chronologicalAlbumsRef.current.length > 0) {\r\n            navigateToNextAlbumRef.current()\r\n          }\r\n          break\r\n        case 'p':\r\n          event.preventDefault()\r\n          if (chronologicalAlbumsRef.current.length > 0) {\r\n            navigateToPreviousAlbumRef.current()\r\n          }\r\n          break\r\n        case 'a':\r\n          event.preventDefault()\r\n          if (currentAlbumRef.current) {\r\n            showCurrentAlbumRef.current()\r\n          }\r\n          break\r\n        case '.':\r\n          event.preventDefault()\r\n          if (progressionModeRef.current === 'manual' && locationsRef.current.length > 1) {\r\n            advanceToNextLocation()\r\n          }\r\n          break\r\n        case ',':\r\n          event.preventDefault()\r\n          if (progressionModeRef.current === 'manual' && locationsRef.current.length > 1) {\r\n            goToPreviousLocation()\r\n          }\r\n          break\r\n        case 'c':\r\n          event.preventDefault()\r\n          if (isJourneyPausedRef.current && progressionModeRef.current === 'manual') {\r\n            resumeJourney()\r\n          }\r\n          break\r\n      }\r\n    }\r\n\r\n    window.addEventListener('keydown', handleKeyPress, { passive: false })\r\n    return () => window.removeEventListener('keydown', handleKeyPress)\r\n  }, [handlePlayPause, handleReset, handleYearChange, toggleProgressionMode, advanceToNextLocation, goToPreviousLocation, resumeJourney])\r\n\r\n\r\n  // Prepare search data\r\n  const searchData: GlobeSearchResult[] = useMemo(() => {\r\n    return locations.map(location => ({\r\n      id: location.id,\r\n      name: location.name,\r\n      latitude: location.latitude,\r\n      longitude: location.longitude,\r\n      country: location.name, // Use the actual location name\r\n      visitDate: location.visitDate.toISOString(),\r\n      albumCount: location.albums.length,\r\n      photoCount: location.photos.length,\r\n      coverPhotoUrl: location.albums[0]?.coverPhotoUrl,\r\n      tags: [],\r\n      type: 'location' as const\r\n    }))\r\n  }, [locations])\r\n\r\n  // Calculate unique countries and cities for percentage stats\r\n  const travelStats = useMemo(() => {\r\n    // Extract unique countries from location names (last part after comma)\r\n    const uniqueCountries = new Set(\r\n      locations\r\n        .map(loc => {\r\n          const parts = loc.name.split(',').map((p: string) => p.trim())\r\n          return parts[parts.length - 1] || ''\r\n        })\r\n        .filter(country => country.length > 0)\r\n    )\r\n\r\n    // Extract unique cities from location names (first part before comma)\r\n    const uniqueCities = new Set(\r\n      locations\r\n        .map(loc => {\r\n          const parts = loc.name.split(',').map((p: string) => p.trim())\r\n          return parts[0] || loc.name\r\n        })\r\n        .filter(city => city.length > 0)\r\n    )\r\n\r\n    const totalCountriesInWorld = 195 // UN recognized countries\r\n    const totalMajorCitiesInWorld = 10000 // Approximate number of major cities worldwide\r\n\r\n    return {\r\n      countriesVisited: uniqueCountries.size,\r\n      citiesVisited: uniqueCities.size,\r\n      countriesPercentage: ((uniqueCountries.size / totalCountriesInWorld) * 100).toFixed(1),\r\n      citiesPercentage: ((uniqueCities.size / totalMajorCitiesInWorld) * 100).toFixed(2)\r\n    }\r\n  }, [locations])\r\n\r\n  // Dynamic color generation for any year\r\n  const getYearColor = useCallback((year: number): string => {\r\n    // Predefined color palette with vibrant colors\r\n    const colorPalette = [\r\n      '#60a5fa', // bright blue\r\n      '#34d399', // bright green\r\n      '#fbbf24', // bright amber\r\n      '#f87171', // bright red\r\n      '#a78bfa', // bright purple\r\n      '#22d3ee', // bright cyan\r\n      '#fb923c', // bright orange\r\n      '#ec4899', // bright pink\r\n      '#10b981', // emerald\r\n      '#06b6d4', // sky\r\n      '#8b5cf6', // violet\r\n      '#f59e0b', // amber\r\n      '#ef4444', // red\r\n      '#14b8a6', // teal\r\n      '#6366f1', // indigo\r\n      '#f97316', // orange\r\n    ]\r\n\r\n    // Use year as seed for consistent color assignment\r\n    // This ensures the same year always gets the same color\r\n    const colorIndex = Math.abs(year) % colorPalette.length\r\n    return colorPalette[colorIndex]\r\n  }, [])\r\n\r\n  // Convert locations to city pins - memoized and limited by performance mode\r\n  const cityPins: CityPin[] = useMemo(() => {\r\n    // Limit number of pins based on performance mode\r\n    const maxPins = performanceConfig.maxPins\r\n    const limitedLocations = locations.slice(0, maxPins)\r\n\r\n    return limitedLocations.map(location => {\r\n      // Get favorite photos from the first album (since each location represents one album)\r\n      const album = location.albums[0]\r\n      const favoritePhotoUrls = album?.favoritePhotoUrls || []\r\n      const coverPhotoUrl = album?.coverPhotoUrl\r\n\r\n      // Fallback hierarchy: favorite photos > cover photo > first loaded photo\r\n      const fallbackPhotoUrls = favoritePhotoUrls.length > 0\r\n        ? favoritePhotoUrls\r\n        : coverPhotoUrl\r\n          ? [coverPhotoUrl]\r\n          : location.photos.length > 0\r\n            ? [location.photos[0].url]\r\n            : []\r\n\r\n      // Ensure coverPhotoUrl is set - use first available photo\r\n      const finalCoverPhotoUrl = coverPhotoUrl ||\r\n                                 (favoritePhotoUrls.length > 0 ? favoritePhotoUrls[0] : undefined) ||\r\n                                 (location.photos.length > 0 ? location.photos[0].url : undefined)\r\n\r\n      // Get preview photos for modal (first 5-8 photos from location)\r\n      const previewPhotoUrls = location.photos.map(p => p.url).filter(url => url)\r\n\r\n      const cityPin = {\r\n        id: location.id,\r\n        name: location.name,\r\n        latitude: location.latitude,\r\n        longitude: location.longitude,\r\n        albumCount: location.albums.length,\r\n        // Use album's photoCount (actual count) not location.photos.length (only first 5 loaded)\r\n        photoCount: album?.photoCount || location.photos.length,\r\n        visitDate: location.visitDate.toISOString(),\r\n        isVisited: true,\r\n        isActive: activeCityId === location.id,\r\n        favoritePhotoUrls: fallbackPhotoUrls,\r\n        coverPhotoUrl: finalCoverPhotoUrl,\r\n        previewPhotoUrls\r\n      }\r\n\r\n      return cityPin\r\n    })\r\n  }, [locations, activeCityId, performanceConfig.maxPins])\r\n\r\n  // Static connection arcs - connect trips in chronological order (performance optimized)\r\n  const staticConnections = useMemo(() => {\r\n    if (!showStaticConnections || locations.length < 2) return []\r\n\r\n    // Limit connections based on performance mode\r\n    const maxConnections = performanceConfig.maxPins - 1\r\n    const limitedLocations = locations.slice(0, maxConnections + 1)\r\n\r\n    // Sort locations by visit date\r\n    const sortedLocations = [...limitedLocations].sort((a, b) =>\r\n      new Date(a.visitDate).getTime() - new Date(b.visitDate).getTime()\r\n    )\r\n\r\n    const paths: FlightPath[] = []\r\n\r\n    // Create connection paths between consecutive locations\r\n    for (let i = 0; i < sortedLocations.length - 1; i++) {\r\n      const current = sortedLocations[i]\r\n      const next = sortedLocations[i + 1]\r\n\r\n      const currentYear = new Date(current.visitDate).getFullYear()\r\n      const nextYear = new Date(next.visitDate).getFullYear()\r\n\r\n      // If \"All Years\" is selected (selectedYear is null), connect ALL locations chronologically\r\n      // If a specific year is selected, only connect locations within that year\r\n      const shouldConnect = selectedYear === null || currentYear === nextYear\r\n\r\n      if (shouldConnect) {\r\n        // Use the current location's year for color (or next if crossing years)\r\n        const lineYear = currentYear\r\n        paths.push({\r\n          startLat: current.latitude,\r\n          startLng: current.longitude,\r\n          endLat: next.latitude,\r\n          endLng: next.longitude,\r\n          color: getYearColor(lineYear),\r\n          year: lineYear,\r\n          name: `${current.name} → ${next.name}`,\r\n        })\r\n      }\r\n    }\r\n\r\n    return paths\r\n  }, [locations, showStaticConnections, getYearColor, selectedYear, performanceConfig.maxPins])\r\n\r\n\r\n  // Get city pin system data\r\n  const cityPinSystem = CityPinSystem({\r\n    cities: cityPins,\r\n    onCityClick: handleCityClick,\r\n    onClusterClick: handleClusterClick,\r\n    activeCity: activeCityId\r\n  })\r\n\r\n  // Update flight animation when locations change\r\n  useEffect(() => {\r\n    if (locations.length > 1) {\r\n      setLocations(locations)\r\n    }\r\n  }, [locations, setLocations])\r\n\r\n\r\n  // Update camera position from flight animation with smooth easing\r\n  useEffect(() => {\r\n    if (cameraPosition && globeRef.current) {\r\n      animateCameraToPosition(cameraPosition, 1500, 'easeInOutCubic')\r\n    }\r\n  }, [cameraPosition, animateCameraToPosition])\r\n\r\n  // Handle destination camera movement when flight segment completes\r\n  useEffect(() => {\r\n    if (destinationCameraPosition && globeRef.current && !isPlaying) {\r\n      // Add a slight delay to ensure the flight animation has completed\r\n      setTimeout(() => {\r\n        animateCameraToPosition(destinationCameraPosition, 2500, 'easeInOutCubic')\r\n      }, 500)\r\n    }\r\n  }, [destinationCameraPosition, isPlaying, animateCameraToPosition])\r\n\r\n  // Auto-rotation functionality with smooth animation\r\n  // BUGFIX: Removed isPlaying from dependencies - it should only control flight animation, not auto-rotation\r\n  // User should be able to interact with globe whether flight animation is playing or paused\r\n  useEffect(() => {\r\n    if (!globeRef.current || !isAutoRotating || userInteracting) {\r\n      if (autoRotateRef.current) {\r\n        cancelAnimationFrame(autoRotateRef.current as unknown as number)\r\n        autoRotateRef.current = null\r\n      }\r\n      return\r\n    }\r\n\r\n    let lastTime = Date.now()\r\n    const rotationSpeed = 0.1 // Degrees per frame (smooth and gentle)\r\n\r\n    const animate = () => {\r\n      if (globeRef.current && !userInteracting && isAutoRotating) {\r\n        const currentTime = Date.now()\r\n        const deltaTime = currentTime - lastTime\r\n        lastTime = currentTime\r\n\r\n        // Calculate smooth rotation based on time elapsed\r\n        const rotationAmount = rotationSpeed * (deltaTime / 16.67) // Normalize to 60fps\r\n\r\n        const pov = globeRef.current.pointOfView()\r\n        globeRef.current.pointOfView({\r\n          ...pov,\r\n          lng: (pov.lng + rotationAmount) % 360\r\n        }, 0)\r\n\r\n        autoRotateRef.current = requestAnimationFrame(animate) as unknown as NodeJS.Timeout\r\n      }\r\n    }\r\n\r\n    autoRotateRef.current = requestAnimationFrame(animate) as unknown as NodeJS.Timeout\r\n\r\n    return () => {\r\n      if (autoRotateRef.current) {\r\n        cancelAnimationFrame(autoRotateRef.current as unknown as number)\r\n        autoRotateRef.current = null\r\n      }\r\n    }\r\n  }, [isAutoRotating, userInteracting])\r\n\r\n  // Cleanup on unmount - Comprehensive cleanup of all resources\r\n  useEffect(() => {\r\n    return () => {\r\n      log.info('Cleaning up globe component', {\r\n        component: 'EnhancedGlobe',\r\n        action: 'cleanup-unmount'\r\n      })\r\n\r\n      // Cancel all animation frames\r\n      if (autoRotateRef.current) {\r\n        cancelAnimationFrame(autoRotateRef.current as unknown as number)\r\n        autoRotateRef.current = null\r\n      }\r\n      if (cameraAnimationRef.current) {\r\n        cancelAnimationFrame(cameraAnimationRef.current)\r\n        cameraAnimationRef.current = null\r\n      }\r\n\r\n      // Stop WebGL rendering\r\n      if (rendererRef.current) {\r\n        rendererRef.current.setAnimationLoop(null)\r\n        rendererRef.current = null\r\n      }\r\n\r\n      // Dispose Three.js resources\r\n      if (globeRef.current) {\r\n        const globeMethods = globeRef.current as unknown as GlobeInternals\r\n        const scene = globeMethods.scene?.()\r\n        const renderer = globeMethods.renderer?.()\r\n\r\n        // Dispose of all geometries and materials in the scene\r\n        if (scene && typeof scene === 'object' && 'traverse' in scene) {\r\n          interface ThreeObject {\r\n            geometry?: { dispose: () => void }\r\n            material?: { dispose: () => void } | Array<{ dispose: () => void }>\r\n          }\r\n\r\n          (scene as { traverse: (callback: (obj: ThreeObject) => void) => void }).traverse((object: ThreeObject) => {\r\n            if (object.geometry) {\r\n              object.geometry.dispose()\r\n            }\r\n            if (object.material) {\r\n              if (Array.isArray(object.material)) {\r\n                object.material.forEach((material) => material.dispose())\r\n              } else {\r\n                object.material.dispose()\r\n              }\r\n            }\r\n          })\r\n        }\r\n\r\n        // Dispose renderer\r\n        if (renderer && typeof renderer === 'object' && 'dispose' in renderer) {\r\n          (renderer as { dispose: () => void }).dispose()\r\n          log.info('WebGL context disposed', { component: 'EnhancedGlobe' })\r\n        }\r\n      }\r\n    }\r\n  }, [])\r\n\r\n  // Handle initial navigation from feed button - only once\r\n  useEffect(() => {\r\n    // Skip if already handled or missing required data\r\n    if (initialNavigationHandled.current || !globeReady || !initialAlbumId || !initialLat || !initialLng || chronologicalAlbums.length === 0) {\r\n      return\r\n    }\r\n\r\n    // Find the album in chronological order\r\n    const albumIndex = chronologicalAlbums.findIndex(album => album.albumId === initialAlbumId)\r\n    if (albumIndex === -1) {\r\n      return\r\n    }\r\n\r\n    // Mark as handled to prevent re-running\r\n    initialNavigationHandled.current = true\r\n\r\n    const album = chronologicalAlbums[albumIndex]\r\n\r\n    // Set to \"All Years\" mode to show all albums\r\n    setSelectedYear(null)\r\n\r\n    // Set the current album index (for chronological navigation)\r\n    setCurrentAlbumIndex(albumIndex)\r\n\r\n    // Find the location index if needed for location-based features\r\n    const locationIndex = locations.findIndex(loc => loc.id === initialAlbumId)\r\n    if (locationIndex !== -1) {\r\n      setCurrentLocationIndex(locationIndex)\r\n    }\r\n\r\n    // Disable auto-rotation\r\n    setIsAutoRotating(false)\r\n\r\n    // Animate to the location\r\n    animateCameraToPosition({\r\n      lat: initialLat,\r\n      lng: initialLng,\r\n      altitude: 1.5\r\n    }, 2000, 'easeInOutCubic')\r\n\r\n    // After camera animation, show the album modal with chronological positioning\r\n    setTimeout(() => {\r\n      const city = cityPins.find(pin => pin.id === initialAlbumId)\r\n      if (city) {\r\n        const singleCityCluster: CityCluster = {\r\n          id: `album-${album.albumId}`,\r\n          latitude: album.latitude,\r\n          longitude: album.longitude,\r\n          cities: [city],\r\n          totalAlbums: 1,\r\n          totalPhotos: album.photoCount,\r\n          radius: 1\r\n        }\r\n\r\n        setSelectedCluster(singleCityCluster)\r\n        setShowAlbumModal(true)\r\n        setActiveCityId(city.id)\r\n      }\r\n    }, 2500)\r\n  }, [globeReady, initialAlbumId, initialLat, initialLng, chronologicalAlbums, cityPins, animateCameraToPosition, locations, setSelectedYear])\r\n\r\n  // Search and preview functions\r\n  const handleSearchResult = useCallback((result: GlobeSearchResult) => {\r\n    const location = locations.find(loc => loc.id === result.id)\r\n    if (location) {\r\n      setActiveCityId(result.id)\r\n      setIsAutoRotating(false)\r\n      animateCameraToPosition({\r\n        lat: result.latitude,\r\n        lng: result.longitude,\r\n        altitude: 1.5\r\n      }, 1500, 'easeInOutCubic')\r\n\r\n    }\r\n  }, [locations, animateCameraToPosition])\r\n\r\n\r\n\r\n  function handleCityClick(city: CityPin) {\r\n    setActiveCityId(city.id)\r\n    setIsAutoRotating(false)\r\n\r\n    // Create a single-city cluster for the modal with unique ID to force re-render\r\n    const singleCityCluster: CityCluster = {\r\n      id: `single-${city.id}-${Date.now()}`,\r\n      latitude: city.latitude,\r\n      longitude: city.longitude,\r\n      cities: [city],\r\n      totalAlbums: city.albumCount,\r\n      totalPhotos: city.photoCount,\r\n      radius: 1\r\n    }\r\n\r\n    // Show album modal\r\n    setSelectedCluster(singleCityCluster)\r\n    setShowAlbumModal(true)\r\n\r\n\r\n    if (globeRef.current) {\r\n      animateCameraToPosition({\r\n        lat: city.latitude,\r\n        lng: city.longitude,\r\n        altitude: 1.5\r\n      }, 1200, 'easeInOutCubic')\r\n    }\r\n    // Don't auto-enable rotation - let user toggle it manually\r\n  }\r\n\r\n  function handleClusterClick(cluster: CityCluster) {\r\n    setSelectedCluster(cluster)\r\n    setShowAlbumModal(true)\r\n    setIsAutoRotating(false)\r\n\r\n    // Switch to manual mode when user clicks on a location\r\n    if (progressionMode === 'auto') {\r\n      setProgressionMode('manual')\r\n      pause() // Pause the journey animation\r\n      setIsJourneyPaused(true)\r\n    }\r\n\r\n    if (globeRef.current) {\r\n      animateCameraToPosition({\r\n        lat: cluster.latitude,\r\n        lng: cluster.longitude,\r\n        altitude: 1.2\r\n      }, 1200, 'easeInOutCubic')\r\n    }\r\n    // Don't auto-enable rotation - let user toggle it manually\r\n  }\r\n\r\n\r\n  function zoomIn() {\r\n    if (globeRef.current) {\r\n      const pov = globeRef.current.pointOfView()\r\n      const newAltitude = Math.max(0.5, pov.altitude * 0.8)\r\n      animateCameraToPosition({ ...pov, altitude: newAltitude }, 400, 'easeInOutQuad')\r\n      setIsAutoRotating(false)\r\n      // Don't auto-enable rotation\r\n    }\r\n  }\r\n\r\n  function zoomOut() {\r\n    if (globeRef.current) {\r\n      const pov = globeRef.current.pointOfView()\r\n      const newAltitude = Math.min(5, pov.altitude * 1.2)\r\n      animateCameraToPosition({ ...pov, altitude: newAltitude }, 400, 'easeInOutQuad')\r\n      setIsAutoRotating(false)\r\n      // Don't auto-enable rotation\r\n    }\r\n  }\r\n\r\n  // Get current segment for timeline controls (currently unused)\r\n  // const currentSegment = locations[progress.currentSegment] ? {\r\n  //   id: locations[progress.currentSegment].id,\r\n  //   year: locations[progress.currentSegment].visitDate.getFullYear(),\r\n  //   sequenceOrder: progress.currentSegment + 1,\r\n  //   cityId: undefined,\r\n  //   countryId: undefined,\r\n  //   visitDate: locations[progress.currentSegment].visitDate.toISOString().split('T')[0],\r\n  //   latitude: locations[progress.currentSegment].latitude,\r\n  //   longitude: locations[progress.currentSegment].longitude,\r\n  //   albumCount: locations[progress.currentSegment].albums.length,\r\n  //   photoCount: locations[progress.currentSegment].photos.length,\r\n  //   locationName: locations[progress.currentSegment].name\r\n  // } : null\r\n\r\n\r\n  if (timelineLoading) {\r\n    return (\r\n      <div className=\"space-y-8\">\r\n        <div className=\"text-center py-12\">\r\n          <Loader2 className=\"h-12 w-12 animate-spin mx-auto text-blue-600\" />\r\n          <h2 className=\"text-xl font-semibold mt-4\">Loading your travel timeline...</h2>\r\n          <p className=\"text-gray-800 mt-2\">Preparing flight animation data</p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className={`space-y-6 ${className}`}>\r\n      {/* Single Location Animations */}\r\n      <style jsx>{`\r\n        @keyframes pulse-ring {\r\n          0% {\r\n            transform: scale(1);\r\n            opacity: 1;\r\n          }\r\n          50% {\r\n            transform: scale(1.2);\r\n            opacity: 0.7;\r\n          }\r\n          100% {\r\n            transform: scale(1.4);\r\n            opacity: 0;\r\n          }\r\n        }\r\n\r\n        .globe-pin:hover .single-location-tooltip {\r\n          opacity: 1 !important;\r\n        }\r\n      `}</style>\r\n      {/* Compact Header */}\r\n      <div className=\"relative overflow-hidden rounded-2xl bg-gradient-to-br from-blue-600 via-indigo-600 to-purple-600 p-6 text-white shadow-xl\">\r\n        <div className=\"absolute inset-0 bg-black/10\"></div>\r\n        <div className=\"relative z-10\">\r\n          <h1 className=\"text-3xl font-bold flex items-center gap-3 mb-2\">\r\n            <GlobeIcon className=\"h-8 w-8\" />\r\n            Your Travel Globe\r\n          </h1>\r\n          <p className=\"text-white/90 text-sm\">\r\n            {locations.length > 0\r\n              ? `Explore your ${locations.length} ${locations.length === 1 ? 'adventure' : 'adventures'} across the world`\r\n              : 'Create your first album to see your travels on the globe'}\r\n          </p>\r\n\r\n          {/* Stats Grid */}\r\n          {locations.length > 0 && (\r\n            <div className=\"mt-4 grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-6 gap-3\">\r\n              <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-3\">\r\n                <div className=\"text-2xl font-bold\">{cityPinSystem.clusters.length}</div>\r\n                <div className=\"text-xs text-white/80 uppercase tracking-wider mt-1\">Location{cityPinSystem.clusters.length !== 1 ? 's' : ''}</div>\r\n              </div>\r\n              <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-3\">\r\n                <div className=\"text-2xl font-bold\">\r\n                  {cityPinSystem.clusters.reduce((sum, cluster) => sum + cluster.totalAlbums, 0)}\r\n                </div>\r\n                <div className=\"text-xs text-white/80 uppercase tracking-wider mt-1\">Album{cityPinSystem.clusters.reduce((sum, cluster) => sum + cluster.totalAlbums, 0) !== 1 ? 's' : ''}</div>\r\n              </div>\r\n              <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-3\">\r\n                <div className=\"text-2xl font-bold\">\r\n                  {cityPinSystem.clusters.reduce((sum, cluster) => sum + cluster.totalPhotos, 0)}\r\n                </div>\r\n                <div className=\"text-xs text-white/80 uppercase tracking-wider mt-1\">Photo{cityPinSystem.clusters.reduce((sum, cluster) => sum + cluster.totalPhotos, 0) !== 1 ? 's' : ''}</div>\r\n              </div>\r\n              <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-3\">\r\n                <div className=\"text-2xl font-bold\">{availableYears.length}</div>\r\n                <div className=\"text-xs text-white/80 uppercase tracking-wider mt-1\">Year{availableYears.length !== 1 ? 's' : ''}</div>\r\n              </div>\r\n              <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-3\">\r\n                <div className=\"text-2xl font-bold\">{travelStats.countriesPercentage}%</div>\r\n                <div className=\"text-xs text-white/80 uppercase tracking-wider mt-1\">{travelStats.countriesVisited} Countr{travelStats.countriesVisited !== 1 ? 'ies' : 'y'}</div>\r\n              </div>\r\n              <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-3\">\r\n                <div className=\"text-2xl font-bold\">{travelStats.citiesPercentage}%</div>\r\n                <div className=\"text-xs text-white/80 uppercase tracking-wider mt-1\">{travelStats.citiesVisited} Cit{travelStats.citiesVisited !== 1 ? 'ies' : 'y'}</div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Quick Actions - Centered */}\r\n      <div className=\"flex items-center justify-center gap-2 mb-4\">\r\n        <Link href=\"/albums/new\">\r\n          <Button size=\"sm\" className=\"shadow-lg\">\r\n            <Plus className=\"h-4 w-4 mr-2\" />\r\n            {filterUserId ? 'Add Your Own Adventure' : 'Add Adventure'}\r\n          </Button>\r\n        </Link>\r\n      </div>\r\n\r\n      {/* Globe Container with Floating Controls */}\r\n      <div className=\"relative bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 rounded-2xl shadow-2xl border border-gray-700 overflow-hidden\">\r\n        {/* Floating Controls - Top */}\r\n        <div className=\"absolute top-4 left-4 right-4 z-20 flex items-center justify-between gap-2\">\r\n          <div className=\"flex items-center gap-1.5 backdrop-blur-xl bg-gray-900/95 rounded-xl p-1.5 shadow-2xl border border-white/10\">\r\n            <Button\r\n              variant=\"ghost\"\r\n              size=\"sm\"\r\n              onClick={() => setShowSearch(!showSearch)}\r\n              className={cn(\"h-9 w-9 p-0 text-white hover:bg-white/20 rounded-lg transition-all\", showSearch && 'bg-blue-500/30 text-blue-200')}\r\n              title=\"Search locations (S)\"\r\n            >\r\n              <Search className=\"h-4 w-4\" />\r\n            </Button>\r\n            {locations.length > 1 && (\r\n              <Button\r\n                variant=\"ghost\"\r\n                size=\"sm\"\r\n                onClick={handlePlayPause}\r\n                disabled={locations.length < 2}\r\n                className=\"h-9 w-9 p-0 text-white hover:bg-white/20 rounded-lg transition-all\"\r\n                id=\"play-button\"\r\n                title={isPlaying ? 'Pause animation (Space)' : 'Play animation (Space)'}\r\n              >\r\n                {isPlaying ? <Pause className=\"h-4 w-4\" /> : <Play className=\"h-4 w-4\" />}\r\n              </Button>\r\n            )}\r\n            <Button\r\n              variant=\"ghost\"\r\n              size=\"sm\"\r\n              onClick={() => setShowStaticConnections(!showStaticConnections)}\r\n              className={cn(\"h-9 w-9 p-0 text-white hover:bg-white/20 rounded-lg transition-all\", showStaticConnections && 'bg-green-500/30 text-green-200')}\r\n              title=\"Toggle travel routes\"\r\n            >\r\n              <Route className=\"h-4 w-4\" />\r\n            </Button>\r\n            <Button\r\n              variant=\"ghost\"\r\n              size=\"sm\"\r\n              onClick={handleReset}\r\n              className=\"h-9 w-9 p-0 text-white hover:bg-white/20 rounded-lg transition-all\"\r\n              title=\"Reset view (R)\"\r\n            >\r\n              <RotateCcw className=\"h-4 w-4\" />\r\n            </Button>\r\n          </div>\r\n\r\n          <div className=\"flex items-center gap-1.5 backdrop-blur-xl bg-gray-900/95 rounded-xl p-1.5 shadow-2xl border border-white/10\">\r\n            <Button\r\n              variant=\"ghost\"\r\n              size=\"sm\"\r\n              onClick={zoomIn}\r\n              className=\"h-9 w-9 p-0 text-white hover:bg-white/20 rounded-lg transition-all\"\r\n              title=\"Zoom in\"\r\n            >\r\n              <ZoomIn className=\"h-4 w-4\" />\r\n            </Button>\r\n            <Button\r\n              variant=\"ghost\"\r\n              size=\"sm\"\r\n              onClick={zoomOut}\r\n              className=\"h-9 w-9 p-0 text-white hover:bg-white/20 rounded-lg transition-all\"\r\n              title=\"Zoom out\"\r\n            >\r\n              <ZoomOut className=\"h-4 w-4\" />\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      {/* Error Message */}\r\n      {timelineError && (\r\n        <Card className=\"border-red-200 bg-red-50\">\r\n          <CardContent className=\"pt-6\">\r\n            <div className=\"text-center\">\r\n              <p className=\"text-red-600 font-medium\">Unable to load travel timeline</p>\r\n              <p className=\"text-red-500 text-sm mt-1\">{timelineError}</p>\r\n              <Button variant=\"outline\" onClick={refreshData} className=\"mt-4\">\r\n                Try Again\r\n              </Button>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n\r\n      {/* Search Bar */}\r\n      {showSearch && (\r\n        <div className=\"flex justify-center\">\r\n          <GlobeSearch\r\n            data={searchData}\r\n            onResultClick={handleSearchResult}\r\n            onClearSearch={() => setShowSearch(false)}\r\n            className=\"w-full max-w-md\"\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      {/* Consolidated Timeline Controls */}\r\n      {availableYears.length > 0 && (\r\n        <div className=\"bg-gradient-to-br from-slate-900/95 via-slate-800/95 to-slate-900/95 backdrop-blur-xl rounded-2xl p-6 shadow-2xl border border-slate-700/50\">\r\n          <div className=\"space-y-6\">\r\n            {/* Year Selection */}\r\n            <div className=\"text-center\">\r\n              <div className=\"inline-flex items-center gap-3 mb-6\">\r\n                <div className=\"h-px w-12 bg-gradient-to-r from-transparent via-blue-500 to-purple-500\"></div>\r\n                <h3 className=\"text-xl sm:text-2xl font-bold bg-gradient-to-r from-blue-400 via-purple-400 to-pink-400 bg-clip-text text-transparent\">\r\n                  Travel Timeline\r\n                </h3>\r\n                <div className=\"h-px w-12 bg-gradient-to-r from-purple-500 via-pink-500 to-transparent\"></div>\r\n              </div>\r\n              <div className=\"flex flex-wrap justify-center gap-3\">\r\n                {/* All Years Button */}\r\n                <button\r\n                  onClick={() => setSelectedYear(null)}\r\n                  className={cn(\r\n                    \"group relative px-6 py-3.5 rounded-2xl transition-all duration-300 min-w-[110px] overflow-hidden\",\r\n                    !selectedYear\r\n                      ? \"bg-gradient-to-br from-blue-500 via-purple-500 to-pink-500 shadow-lg shadow-blue-500/30 scale-105 hover:shadow-xl hover:shadow-blue-500/40\"\r\n                      : \"bg-slate-800/80 hover:bg-slate-700/80 border border-slate-600/50 hover:border-slate-500\"\r\n                  )}\r\n                >\r\n                  <div className=\"relative z-10\">\r\n                    <div className={cn(\r\n                      \"font-bold text-sm\",\r\n                      !selectedYear ? \"text-white\" : \"text-slate-200\"\r\n                    )}>\r\n                      All Years\r\n                    </div>\r\n                    <div className={cn(\r\n                      \"text-xs mt-1 font-medium\",\r\n                      !selectedYear ? \"text-blue-50\" : \"text-slate-400\"\r\n                    )}>\r\n                      {availableYears.reduce((total, year) => {\r\n                        const yearData = getYearData(year)\r\n                        return total + (yearData?.totalLocations || 0)\r\n                      }, 0)} places\r\n                    </div>\r\n                  </div>\r\n                  {!selectedYear && (\r\n                    <div className=\"absolute inset-0 bg-gradient-to-br from-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\"></div>\r\n                  )}\r\n                </button>\r\n\r\n                {/* Individual Year Buttons */}\r\n                {availableYears.map((year) => {\r\n                  const yearData = getYearData(year)\r\n                  const isSelected = selectedYear === year\r\n                  return (\r\n                    <button\r\n                      key={year}\r\n                      onClick={() => handleYearChange(year)}\r\n                      className={cn(\r\n                        \"group relative px-6 py-3.5 rounded-2xl transition-all duration-300 min-w-[110px] overflow-hidden\",\r\n                        isSelected\r\n                          ? \"bg-gradient-to-br from-orange-500 via-pink-500 to-rose-500 shadow-lg shadow-orange-500/30 scale-105 hover:shadow-xl hover:shadow-orange-500/40\"\r\n                          : \"bg-slate-800/80 hover:bg-slate-700/80 border border-slate-600/50 hover:border-slate-500\"\r\n                      )}\r\n                    >\r\n                      <div className=\"relative z-10\">\r\n                        <div className={cn(\r\n                          \"font-bold text-sm\",\r\n                          isSelected ? \"text-white\" : \"text-slate-200\"\r\n                        )}>\r\n                          {year}\r\n                        </div>\r\n                        {yearData && (\r\n                          <div className={cn(\r\n                            \"text-xs mt-1 font-medium\",\r\n                            isSelected ? \"text-orange-50\" : \"text-slate-400\"\r\n                          )}>\r\n                            {yearData.totalLocations} places\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                      {isSelected && (\r\n                        <div className=\"absolute inset-0 bg-gradient-to-br from-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity\"></div>\r\n                      )}\r\n                    </button>\r\n                  )\r\n                })}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Journey Progress - Only show if viewing single year with multiple locations */}\r\n            {locations.length > 1 && selectedYear !== null && (\r\n              <div className=\"space-y-3 pt-6 border-t border-slate-700/50\">\r\n                {/* Current Location Info */}\r\n                {locations[currentLocationIndex] && (\r\n                  <div className=\"relative overflow-hidden bg-gradient-to-br from-slate-800/90 via-slate-800/70 to-slate-900/90 backdrop-blur-md rounded-2xl p-5 border border-slate-600/50 shadow-xl\">\r\n                    <div className=\"absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-blue-500/10 to-purple-500/10 rounded-full blur-3xl\"></div>\r\n\r\n                    <div className=\"relative z-10\">\r\n                      <div className=\"flex items-start justify-between gap-3 mb-4\">\r\n                        <div className=\"flex-1 min-w-0\">\r\n                          <div className=\"flex items-center gap-2 mb-2\">\r\n                            <div className=\"p-1.5 bg-blue-500/20 rounded-lg\">\r\n                              <Plane className=\"h-4 w-4 text-blue-400 flex-shrink-0\" />\r\n                            </div>\r\n                            <span className=\"text-xs font-bold text-slate-400 uppercase tracking-widest\">\r\n                              Location {currentLocationIndex + 1} of {locations.length}\r\n                            </span>\r\n                          </div>\r\n                          <div className=\"font-bold text-white text-lg leading-tight mb-1.5\">\r\n                            {locations[currentLocationIndex].name}\r\n                          </div>\r\n                          <div className=\"flex items-center gap-2 text-slate-400 text-sm\">\r\n                            <svg className=\"h-3.5 w-3.5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\" />\r\n                            </svg>\r\n                            {locations[currentLocationIndex].visitDate.toLocaleDateString('en-US', {\r\n                              month: 'short',\r\n                              day: 'numeric',\r\n                              year: 'numeric'\r\n                            })}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n\r\n                      {/* Enhanced Progress Bar */}\r\n                      <div className=\"relative\">\r\n                        <div className=\"w-full bg-slate-700/40 rounded-full h-2.5 overflow-hidden shadow-inner\">\r\n                          <div\r\n                            className=\"bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 h-2.5 rounded-full transition-all duration-500 shadow-lg shadow-blue-500/50\"\r\n                            style={{ width: `${((currentLocationIndex + 1) / locations.length) * 100}%` }}\r\n                          >\r\n                            <div className=\"h-full w-full bg-gradient-to-r from-white/30 to-transparent\"></div>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"flex justify-between mt-2 text-xs font-medium text-slate-400\">\r\n                          <span>Progress</span>\r\n                          <span>{Math.round(((currentLocationIndex + 1) / locations.length) * 100)}%</span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n        {/* Globe */}\r\n        <div ref={globeContainerRef} className=\"rounded-2xl overflow-hidden relative flex items-center justify-center\" style={{ height: windowDimensions.height }}>\r\n                <Globe\r\n                  ref={globeRef}\r\n                  globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-blue-marble.jpg\"\r\n                  backgroundColor=\"#0f1729\"\r\n                  width={windowDimensions.width}\r\n                  height={windowDimensions.height}\r\n                  showAtmosphere={performanceConfig.showAtmosphere}\r\n                  atmosphereColor=\"rgb(135, 206, 250)\"\r\n                  atmosphereAltitude={performanceConfig.atmosphereAltitude}\r\n\r\n                  // Enhanced interaction handling - only for globe background clicks\r\n                  onGlobeClick={(globalPoint, event) => {\r\n                    // Only handle globe background clicks, not pin clicks\r\n                    if (event && !(event.target as HTMLElement)?.closest('.globe-pin')) {\r\n                      setUserInteracting(true)\r\n                      setIsAutoRotating(false)\r\n                      setTimeout(() => {\r\n                        setUserInteracting(false)\r\n                        // Don't auto-enable rotation\r\n                      }, 2000)\r\n                    }\r\n                  }}\r\n\r\n                  // Smooth controls\r\n                  enablePointerInteraction={true}\r\n\r\n                  // Performance optimizations\r\n                  rendererConfig={{\r\n                    antialias: false,\r\n                    powerPreference: 'low-power'\r\n                  }}\r\n\r\n                  // City pins\r\n                  htmlElementsData={cityPinSystem.pinData}\r\n                  htmlLat={(d: object) => (d as { lat: number }).lat}\r\n                  htmlLng={(d: object) => (d as { lng: number }).lng}\r\n                  htmlAltitude={(d: object) => (d as { size: number }).size * 0.01}\r\n                  htmlElement={(d: object) => {\r\n                    const data = d as {\r\n                      lat: number;\r\n                      lng: number;\r\n                      size: number;\r\n                      color: string;\r\n                      opacity: number;\r\n                      cluster: CityCluster;\r\n                      isMultiCity: boolean;\r\n                      isActive: boolean;\r\n                      label: string;\r\n                      albumCount: number;\r\n                      photoCount: number;\r\n                    }\r\n                    const el = document.createElement('div')\r\n                    const pinSize = Math.max(data.size * 24, 50)\r\n\r\n                    // Set up the container with proper event handling\r\n                    el.style.cssText = `\r\n                      position: relative;\r\n                      width: ${pinSize}px;\r\n                      height: ${pinSize}px;\r\n                      cursor: pointer;\r\n                      pointer-events: auto;\r\n                      z-index: 10;\r\n                      user-select: none;\r\n                      -webkit-user-select: none;\r\n                      -webkit-touch-callout: none;\r\n                    `\r\n\r\n                    // Get year from location data to determine color\r\n                    const location = locations.find(loc =>\r\n                      Math.abs(loc.latitude - data.lat) < 0.001 &&\r\n                      Math.abs(loc.longitude - data.lng) < 0.001\r\n                    )\r\n                    const locationYear = location ? location.visitDate.getFullYear() : new Date().getFullYear()\r\n                    const yearColor = getYearColor(locationYear)\r\n\r\n                    // Simplified background color (no gradient for performance)\r\n                    const pinColor = data.isActive ? '#ffa500' : yearColor\r\n\r\n                    // TODO: SECURITY - Refactor to use DOM APIs (createElement, appendChild) instead of innerHTML\r\n                    // Current implementation uses escapeHtml as temporary XSS protection\r\n                    el.innerHTML = `\r\n                      <div class=\"globe-pin\" style=\"\r\n                        width: 100%;\r\n                        height: 100%;\r\n                        background: ${pinColor};\r\n                        border: ${data.isActive ? '3px' : '2px'} solid white;\r\n                        border-radius: 50%;\r\n                        opacity: ${data.opacity};\r\n                        box-shadow: 0 4px 12px rgba(0,0,0,0.4);\r\n                        cursor: pointer;\r\n                        position: relative;\r\n                        display: flex;\r\n                        align-items: center;\r\n                        justify-content: center;\r\n                        pointer-events: auto;\r\n                        will-change: transform;\r\n                      \">\r\n                        <!-- Icon -->\r\n                        <div style=\"\r\n                          font-size: ${Math.max(pinSize * 0.35, 26)}px;\r\n                          pointer-events: none;\r\n                        \">📍</div>\r\n\r\n                        ${data.isMultiCity ? `\r\n                          <!-- Multi-city badge (simplified) -->\r\n                          <div style=\"\r\n                            position: absolute;\r\n                            top: -6px;\r\n                            right: -6px;\r\n                            background: #f59e0b;\r\n                            color: white;\r\n                            border-radius: 50%;\r\n                            width: ${Math.max(pinSize * 0.3, 20)}px;\r\n                            height: ${Math.max(pinSize * 0.3, 20)}px;\r\n                            display: flex;\r\n                            align-items: center;\r\n                            justify-content: center;\r\n                            font-size: ${Math.max(pinSize * 0.16, 11)}px;\r\n                            font-weight: 700;\r\n                            border: 2px solid white;\r\n                            pointer-events: none;\r\n                          \">${escapeHtml(String(data.cluster.cities.length))}</div>\r\n                        ` : ''}\r\n                      </div>\r\n                    `\r\n\r\n                    // Targeted click handling - only prevent globe rotation, allow other page interactions\r\n                    const handleClick = (event: Event) => {\r\n                      // Only prevent default if this is actually a pin click\r\n                      if (event.target && (event.target as HTMLElement).closest('.globe-pin')) {\r\n                        event.preventDefault()\r\n                        event.stopPropagation() // Only stop globe rotation, not all page interactions\r\n\r\n                        // Ensure data has the cluster property for handlePinClick\r\n                        const pinData = data as GlobeHtmlElement\r\n                        if (pinData && pinData.cluster) {\r\n                          cityPinSystem.handlePinClick(pinData)\r\n\r\n                          log.debug('Pin clicked with cluster data', {\r\n                            component: 'EnhancedGlobe',\r\n                            action: 'pin-click',\r\n                            clusterId: pinData.cluster.id,\r\n                            cityCount: pinData.cluster.cities.length\r\n                          })\r\n                        } else {\r\n                          // Fallback: handle as direct city click if no cluster\r\n                          log.warn('Pin clicked but no cluster data available', {\r\n                            component: 'EnhancedGlobe',\r\n                            action: 'pin-click-fallback',\r\n                            data: pinData\r\n                          })\r\n\r\n                          // Create a temporary cluster for single city\r\n                          const city = cityPins.find(c =>\r\n                            Math.abs(c.latitude - pinData.lat) < 0.001 &&\r\n                            Math.abs(c.longitude - pinData.lng) < 0.001\r\n                          )\r\n                          if (city) {\r\n                            handleCityClick(city)\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n\r\n                    // Add event listeners with standard event handling (no capture)\r\n                    el.addEventListener('click', handleClick)\r\n                    el.addEventListener('touchend', handleClick)\r\n\r\n                    // Enhanced hover effects with photo preview\r\n                    el.addEventListener('mouseenter', () => {\r\n                      el.style.transform = 'scale(1.5)'\r\n                      el.style.zIndex = '1000'\r\n                      const pinElement = el.querySelector('.globe-pin') as HTMLElement\r\n                      if (pinElement) {\r\n                        pinElement.style.transform = 'scale(1.1)'\r\n                        pinElement.style.boxShadow = `\r\n                          0 10px 40px rgba(0,0,0,0.4),\r\n                          0 5px 20px ${data.isActive ? '#3b82f6aa' : `${yearColor}aa`},\r\n                          inset 0 -3px 8px rgba(0,0,0,0.2),\r\n                          inset 0 3px 8px rgba(255,255,255,0.5)\r\n                        `\r\n                        pinElement.style.borderWidth = '4px'\r\n                      }\r\n\r\n                      // Remove any existing tooltip first\r\n                      const existingTooltip = el.querySelector('.photo-preview-tooltip')\r\n                      if (existingTooltip) {\r\n                        existingTooltip.remove()\r\n                      }\r\n\r\n                      // Add cleaner tooltip with album cover photo\r\n                      const city = data.cluster.cities[0]\r\n                      if (city && (city.coverPhotoUrl || city.favoritePhotoUrls?.length)) {\r\n                        // Prioritize cover photo, then first favorite, then first available photo\r\n                        const photoUrl = city.coverPhotoUrl || city.favoritePhotoUrls?.[0]\r\n                        if (photoUrl) {\r\n                          const tooltip = document.createElement('div')\r\n                          tooltip.id = `tooltip-${data.cluster.id}`\r\n                          tooltip.className = 'photo-preview-tooltip'\r\n                          // TODO: SECURITY - Refactor to use DOM APIs (createElement, appendChild) instead of innerHTML\r\n                          // Current implementation uses escapeHtml/escapeAttr as temporary XSS protection\r\n                          tooltip.innerHTML = `\r\n                            <div style=\"\r\n                              position: absolute;\r\n                              bottom: ${pinSize + 15}px;\r\n                              left: 50%;\r\n                              transform: translateX(-50%);\r\n                              background: white;\r\n                              border-radius: 16px;\r\n                              padding: 6px;\r\n                              box-shadow: 0 8px 32px rgba(0,0,0,0.25);\r\n                              border: 3px solid ${data.isActive ? '#3b82f6' : '#ef4444'};\r\n                              z-index: 2000;\r\n                              pointer-events: none;\r\n                              opacity: 0;\r\n                              transition: all 0.25s ease;\r\n                            \">\r\n                              <img src=\"${escapeAttr(photoUrl)}\" alt=\"${escapeAttr(city.name)}\" style=\"\r\n                                width: 140px;\r\n                                height: 90px;\r\n                                object-fit: cover;\r\n                                border-radius: 12px;\r\n                                display: block;\r\n                              \" />\r\n                              <div style=\"\r\n                                text-align: center;\r\n                                margin-top: 8px;\r\n                                padding: 0 4px;\r\n                                font-size: 12px;\r\n                                font-weight: 700;\r\n                                color: #1f2937;\r\n                                max-width: 140px;\r\n                                white-space: nowrap;\r\n                                overflow: hidden;\r\n                                text-overflow: ellipsis;\r\n                              \">${escapeHtml(city.name)}</div>\r\n                              <div style=\"\r\n                                text-align: center;\r\n                                font-size: 11px;\r\n                                color: #6b7280;\r\n                                margin-top: 3px;\r\n                                font-weight: 600;\r\n                              \">${escapeHtml(String(data.cluster.totalPhotos))} photo${data.cluster.totalPhotos === 1 ? '' : 's'}</div>\r\n                            </div>\r\n                          `\r\n                          el.appendChild(tooltip)\r\n\r\n                          // Animate in\r\n                          requestAnimationFrame(() => {\r\n                            const tooltipElement = tooltip.querySelector('div') as HTMLElement\r\n                            if (tooltipElement) {\r\n                              tooltipElement.style.opacity = '1'\r\n                              tooltipElement.style.transform = 'translateX(-50%) translateY(-8px)'\r\n                            }\r\n                          })\r\n                        }\r\n                      }\r\n                    })\r\n\r\n                    el.addEventListener('mouseleave', () => {\r\n                      el.style.transform = 'scale(1)'\r\n                      el.style.zIndex = '10'\r\n                      const pinElement = el.querySelector('.globe-pin') as HTMLElement\r\n                      if (pinElement) {\r\n                        pinElement.style.transform = 'scale(1)'\r\n                        pinElement.style.boxShadow = `\r\n                          0 6px 20px rgba(0,0,0,0.3),\r\n                          0 3px 10px ${data.isActive ? '#3b82f688' : `${yearColor}88`},\r\n                          inset 0 -2px 6px rgba(0,0,0,0.2),\r\n                          inset 0 2px 6px rgba(255,255,255,0.4)\r\n                        `\r\n                        pinElement.style.borderWidth = data.isActive ? '4px' : '3px'\r\n                      }\r\n\r\n                      // Remove tooltip\r\n                      const existingTooltip = el.querySelector('.photo-preview-tooltip')\r\n                      if (existingTooltip) {\r\n                        const tooltipElement = existingTooltip.querySelector('div') as HTMLElement\r\n                        if (tooltipElement) {\r\n                          tooltipElement.style.opacity = '0'\r\n                          tooltipElement.style.transform = 'translateX(-50%) translateY(0)'\r\n                          setTimeout(() => {\r\n                            existingTooltip.remove()\r\n                          }, 250)\r\n                        }\r\n                      }\r\n                    })\r\n\r\n                    // Add tooltip\r\n                    el.title = formatPinTooltip(data.cluster)\r\n\r\n                    return el\r\n                  }}\r\n\r\n                  // Animation rings disabled for performance\r\n                  ringsData={[]}\r\n                  ringLat={(d: object) => (d as { lat: number }).lat}\r\n                  ringLng={(d: object) => (d as { lng: number }).lng}\r\n                  ringMaxRadius={0}\r\n                  ringPropagationSpeed={0}\r\n                  ringRepeatPeriod={0}\r\n                  ringColor={() => 'transparent'}\r\n\r\n                  // Travel lines - elegant curved arcs showing journey progression\r\n                  arcsData={performanceConfig.showArcs ? staticConnections : []}\r\n                  arcStartLat=\"startLat\"\r\n                  arcStartLng=\"startLng\"\r\n                  arcEndLat=\"endLat\"\r\n                  arcEndLng=\"endLng\"\r\n                  arcColor={(d: object) => {\r\n                    const path = d as FlightPath\r\n                    // Vibrant, glowing colors - use RGB format for THREE.js compatibility\r\n                    return path.color\r\n                  }}\r\n                  arcAltitude={0.25} // Lower, more natural arc curve\r\n                  arcStroke={() => {\r\n                    // Varied line thickness for depth\r\n                    return performanceConfig.arcStroke * 1.2\r\n                  }}\r\n                  arcDashLength={0.3} // Shorter, more frequent dashes\r\n                  arcDashGap={0.1} // Tighter gaps for continuity\r\n                  arcDashAnimateTime={3000} // Slower, more graceful animation\r\n                  arcDashInitialGap={(d: object) => {\r\n                    // Stagger animation start times for wave effect\r\n                    const path = d as FlightPath\r\n                    return (path.year % 3) * 0.33 // Group by year for coordination\r\n                  }}\r\n                  arcCurveResolution={64} // Smoother curves (higher resolution)\r\n                  arcCircularResolution={32} // Smoother tube geometry\r\n\r\n                  onGlobeReady={() => {\r\n                    setGlobeReady(true)\r\n\r\n                    // Throttle rendering based on performance mode for CPU optimization\r\n                    if (globeRef.current) {\r\n                      const globeMethods = globeRef.current as unknown as GlobeInternals\r\n                      const scene = globeMethods.scene?.()\r\n                      if (scene) {\r\n                        const renderer = globeMethods.renderer?.()\r\n                        if (renderer) {\r\n                          // Store renderer reference for visibility control\r\n                          rendererRef.current = renderer\r\n\r\n                          const originalSetAnimationLoop = renderer.setAnimationLoop.bind(renderer)\r\n                          let lastFrameTime = 0\r\n\r\n                          // Adaptive FPS based on performance mode\r\n                          const targetFPS = effectivePerformanceMode === 'high' ? 60 :\r\n                                          effectivePerformanceMode === 'balanced' ? 30 : 20\r\n                          const frameInterval = 1000 / targetFPS\r\n\r\n                          renderer.setAnimationLoop = (callback: ((time: number) => void) | null) => {\r\n                            if (!callback) {\r\n                              originalSetAnimationLoop(null)\r\n                              return\r\n                            }\r\n                            originalSetAnimationLoop((time: number) => {\r\n                              // Check visibility before rendering\r\n                              if (!shouldRender()) {\r\n                                // Skip rendering if not visible or out of viewport\r\n                                return\r\n                              }\r\n\r\n                              // Skip frames if CPU is busy\r\n                              if (time - lastFrameTime >= frameInterval) {\r\n                                lastFrameTime = time\r\n                                callback(time)\r\n                              }\r\n                            })\r\n                          }\r\n\r\n                          log.info('Globe renderer initialized with visibility-aware throttling', {\r\n                            component: 'EnhancedGlobe',\r\n                            targetFPS,\r\n                            performanceMode: effectivePerformanceMode\r\n                          })\r\n                        }\r\n                      }\r\n\r\n                      // Set initial view based on locations or default to India\r\n                      if (locations.length > 0) {\r\n                        // If user has locations, show optimal view of their travels\r\n                        const optimalPosition = calculateOptimalCameraPosition(locations)\r\n                        setTimeout(() => {\r\n                          animateCameraToPosition(optimalPosition, 2000, 'easeInOutExpo')\r\n                        }, 1000)\r\n                      } else {\r\n                        // No locations yet - try to get current location, fallback to India\r\n                        if (navigator.geolocation) {\r\n                          navigator.geolocation.getCurrentPosition(\r\n                            (position) => {\r\n                              // Got current location - animate to it\r\n                              globeRef.current?.pointOfView({\r\n                                lat: position.coords.latitude,\r\n                                lng: position.coords.longitude,\r\n                                altitude: 2\r\n                              }, 1500)\r\n                              log.info('Globe centered on current location', {\r\n                                component: 'EnhancedGlobe',\r\n                                lat: position.coords.latitude,\r\n                                lng: position.coords.longitude\r\n                              })\r\n                            },\r\n                            () => {\r\n                              // Geolocation failed or denied - default to India\r\n                              globeRef.current?.pointOfView({\r\n                                lat: 20.5937, // Center of India\r\n                                lng: 78.9629,\r\n                                altitude: 2\r\n                              }, 1500)\r\n                              log.info('Globe centered on India (default)', {\r\n                                component: 'EnhancedGlobe'\r\n                              })\r\n                            }\r\n                          )\r\n                        } else {\r\n                          // Geolocation not available - default to India\r\n                          globeRef.current?.pointOfView({\r\n                            lat: 20.5937, // Center of India\r\n                            lng: 78.9629,\r\n                            altitude: 2\r\n                          }, 1500)\r\n                          log.info('Globe centered on India (no geolocation)', {\r\n                            component: 'EnhancedGlobe'\r\n                          })\r\n                        }\r\n                      }\r\n                    }\r\n                  }}\r\n                />\r\n\r\n                <FlightAnimation\r\n                  globe={globeRef.current as GlobeInstance | null}\r\n                  airplaneState={currentFlightState ? {\r\n                    isFlying: isPlaying,\r\n                    fromLat: currentFlightState.position.lat,\r\n                    fromLng: currentFlightState.position.lng,\r\n                    toLat: destinationCameraPosition?.lat || currentFlightState.position.lat,\r\n                    toLng: destinationCameraPosition?.lng || currentFlightState.position.lng,\r\n                    progress: currentFlightState.progress,\r\n                    altitude: currentFlightState.position.altitude\r\n                  } : null}\r\n                  isActive={isPlaying}\r\n                  trailColor=\"#00ff88\"\r\n                  airplaneScale={0.005}\r\n                />\r\n\r\n                {!globeReady && (\r\n                  <div className=\"absolute inset-0 flex items-center justify-center\">\r\n                    <Loader2 className=\"h-8 w-8 animate-spin text-blue-600\" />\r\n                  </div>\r\n                )}\r\n        </div>\r\n      </div>\r\n\r\n\r\n\r\n\r\n      {/* Additional Help */}\r\n      {showSearch && (\r\n        <div className=\"fixed bottom-4 right-4 z-40\">\r\n          <Card className=\"bg-orange-900/80 text-white text-sm p-2\">\r\n            <div className=\"space-y-1\">\r\n              <div><kbd className=\"bg-white/20 px-1 rounded\">⌃K</kbd> Search</div>\r\n              <div><kbd className=\"bg-white/20 px-1 rounded\">↑↓</kbd> Navigate</div>\r\n              <div><kbd className=\"bg-white/20 px-1 rounded\">⏎</kbd> Select</div>\r\n              <div><kbd className=\"bg-white/20 px-1 rounded\">Esc</kbd> Close</div>\r\n            </div>\r\n          </Card>\r\n        </div>\r\n      )}\r\n\r\n      {/* Album Image Modal */}\r\n      <AlbumImageModal\r\n        isOpen={showAlbumModal}\r\n        onClose={() => {\r\n          setShowAlbumModal(false)\r\n          setSelectedCluster(null)\r\n          // BUGFIX: Allow globe interaction after closing modal\r\n          setUserInteracting(false)\r\n        }}\r\n        cluster={selectedCluster}\r\n        showProgressionControls={chronologicalAlbums.length > 1}\r\n        currentLocationIndex={currentAlbumIndex}\r\n        totalLocations={chronologicalAlbums.length}\r\n        progressionMode={progressionMode}\r\n        onNextLocation={navigateToNextAlbum}\r\n        onPreviousLocation={navigateToPreviousAlbum}\r\n        onContinueJourney={resumeJourney}\r\n        canGoNext={currentAlbumIndex < chronologicalAlbums.length - 1}\r\n        canGoPrevious={currentAlbumIndex > 0}\r\n      />\r\n\r\n    </div>\r\n  )\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\globe\\FlightAnimation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\globe\\GlobeSearch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\globe\\LocationPreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\globe\\PhotoPinSystem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\globe\\TimelineControls.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\layout\\BottomNavigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\layout\\TopNavigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\layout\\UserNav.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\location\\LocationDropdown.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\location\\LocationSearch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\map\\PhotoMap.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Navigation' is defined but never used.","line":7,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Button' is defined but never used.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":16},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'clusters'. Either include it or remove the dependency array.","line":61,"column":6,"nodeType":"ArrayExpression","endLine":61,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [clusters, mapboxToken]","fix":{"range":[1961,1974],"text":"[clusters, mapboxToken]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport { Photo } from '@/types/database';\r\nimport { clusterPhotos, PhotoCluster } from '@/lib/utils/photo-clustering';\r\nimport { getPhotoUrl } from '@/lib/utils/photo-url';\r\nimport { MapPin, X, Navigation } from 'lucide-react';\r\nimport { Button } from '@/components/ui/button';\r\nimport Image from 'next/image';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\n\r\ninterface PhotoMapProps {\r\n  photos: Photo[];\r\n  onPhotoClick?: (photo: Photo) => void;\r\n  className?: string;\r\n  mapboxToken?: string;\r\n}\r\n\r\nexport function PhotoMap({ photos, onPhotoClick, className, mapboxToken }: PhotoMapProps) {\r\n  const mapContainer = useRef<HTMLDivElement>(null);\r\n  const map = useRef<mapboxgl.Map | null>(null);\r\n  const markers = useRef<mapboxgl.Marker[]>([]);\r\n  const [selectedCluster, setSelectedCluster] = useState<PhotoCluster | null>(null);\r\n  const [mapLoaded, setMapLoaded] = useState(false);\r\n\r\n  // Filter photos with GPS coordinates\r\n  const photosWithLocation = photos.filter(\r\n    photo => photo.latitude != null && photo.longitude != null\r\n  );\r\n\r\n  // Cluster nearby photos\r\n  const clusters = clusterPhotos(photosWithLocation, 5); // 5km radius\r\n\r\n  useEffect(() => {\r\n    if (!mapContainer.current || map.current || !mapboxToken) return;\r\n\r\n    // Initialize map\r\n    mapboxgl.accessToken = mapboxToken;\r\n\r\n    const mapInstance = new mapboxgl.Map({\r\n      container: mapContainer.current,\r\n      style: 'mapbox://styles/mapbox/streets-v12',\r\n      center: clusters.length > 0\r\n        ? [clusters[0].longitude, clusters[0].latitude]\r\n        : [0, 0],\r\n      zoom: clusters.length > 0 ? 10 : 2,\r\n    });\r\n\r\n    mapInstance.addControl(new mapboxgl.NavigationControl(), 'top-right');\r\n\r\n    mapInstance.on('load', () => {\r\n      setMapLoaded(true);\r\n    });\r\n\r\n    map.current = mapInstance;\r\n\r\n    return () => {\r\n      map.current?.remove();\r\n    };\r\n  }, [mapboxToken]);\r\n\r\n  // Add markers when map is loaded\r\n  useEffect(() => {\r\n    if (!map.current || !mapLoaded || clusters.length === 0) return;\r\n\r\n    // Clear existing markers\r\n    markers.current.forEach(marker => marker.remove());\r\n    markers.current = [];\r\n\r\n    // Add cluster markers\r\n    clusters.forEach(cluster => {\r\n      const el = document.createElement('div');\r\n      el.className = 'photo-map-marker';\r\n      el.style.cssText = `\r\n        width: 40px;\r\n        height: 40px;\r\n        border-radius: 50%;\r\n        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n        border: 3px solid white;\r\n        box-shadow: 0 2px 8px rgba(0,0,0,0.3);\r\n        cursor: pointer;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        color: white;\r\n        font-weight: bold;\r\n        font-size: 14px;\r\n        transition: transform 0.2s;\r\n      `;\r\n\r\n      if (cluster.count > 1) {\r\n        el.textContent = cluster.count.toString();\r\n      } else {\r\n        el.textContent = '📷'; // SECURITY: Use textContent instead of innerHTML to prevent XSS\r\n      }\r\n\r\n      // Hover effect\r\n      el.addEventListener('mouseenter', () => {\r\n        el.style.transform = 'scale(1.2)';\r\n      });\r\n\r\n      el.addEventListener('mouseleave', () => {\r\n        el.style.transform = 'scale(1)';\r\n      });\r\n\r\n      // Create marker\r\n      const marker = new mapboxgl.Marker(el)\r\n        .setLngLat([cluster.longitude, cluster.latitude])\r\n        .addTo(map.current!);\r\n\r\n      // Click handler\r\n      el.addEventListener('click', () => {\r\n        setSelectedCluster(cluster);\r\n\r\n        // Fly to marker\r\n        map.current?.flyTo({\r\n          center: [cluster.longitude, cluster.latitude],\r\n          zoom: 14,\r\n          duration: 1000,\r\n        });\r\n      });\r\n\r\n      markers.current.push(marker);\r\n    });\r\n\r\n    // Fit bounds to show all markers\r\n    if (clusters.length > 1) {\r\n      const bounds = new mapboxgl.LngLatBounds();\r\n      clusters.forEach(cluster => {\r\n        bounds.extend([cluster.longitude, cluster.latitude]);\r\n      });\r\n      map.current.fitBounds(bounds, {\r\n        padding: 50,\r\n        maxZoom: 12,\r\n      });\r\n    }\r\n  }, [mapLoaded, clusters]);\r\n\r\n  if (!mapboxToken) {\r\n    return (\r\n      <div className={`bg-gray-100 rounded-lg flex items-center justify-center p-12 ${className}`}>\r\n        <div className=\"text-center text-gray-600\">\r\n          <MapPin className=\"h-12 w-12 mx-auto mb-4 text-gray-400\" />\r\n          <p>Map requires Mapbox access token</p>\r\n          <p className=\"text-sm mt-2\">Set NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN in your environment</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (photosWithLocation.length === 0) {\r\n    return (\r\n      <div className={`bg-gray-100 rounded-lg flex items-center justify-center p-12 ${className}`}>\r\n        <div className=\"text-center text-gray-600\">\r\n          <MapPin className=\"h-12 w-12 mx-auto mb-4 text-gray-400\" />\r\n          <p>No photos with location data</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`relative ${className}`}>\r\n      <div ref={mapContainer} className=\"w-full h-full rounded-lg\" />\r\n\r\n      {/* Selected cluster popup */}\r\n      {selectedCluster && (\r\n        <div className=\"absolute top-4 left-4 right-4 bg-white rounded-lg shadow-lg p-4 max-w-md\">\r\n          <div className=\"flex items-start justify-between mb-3\">\r\n            <div>\r\n              <h3 className=\"font-semibold text-lg\">\r\n                {selectedCluster.location_name || 'Photos'}\r\n              </h3>\r\n              <p className=\"text-sm text-gray-600\">\r\n                {selectedCluster.count} photo{selectedCluster.count > 1 ? 's' : ''}\r\n              </p>\r\n            </div>\r\n            <button\r\n              onClick={() => setSelectedCluster(null)}\r\n              className=\"text-gray-400 hover:text-gray-600\"\r\n            >\r\n              <X className=\"h-5 w-5\" />\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"grid grid-cols-4 gap-2\">\r\n            {selectedCluster.photos.slice(0, 8).map(photo => (\r\n              <button\r\n                key={photo.id}\r\n                onClick={() => {\r\n                  if (onPhotoClick) {\r\n                    onPhotoClick(photo);\r\n                  }\r\n                  setSelectedCluster(null);\r\n                }}\r\n                className=\"relative aspect-square rounded overflow-hidden hover:ring-2 hover:ring-blue-500 transition-all\"\r\n              >\r\n                <Image\r\n                  src={getPhotoUrl(photo.file_path) || ''}\r\n                  alt={photo.caption || 'Photo'}\r\n                  fill\r\n                  className=\"object-cover\"\r\n                />\r\n              </button>\r\n            ))}\r\n            {selectedCluster.count > 8 && (\r\n              <div className=\"aspect-square bg-gray-100 rounded flex items-center justify-center text-sm text-gray-600\">\r\n                +{selectedCluster.count - 8}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\notifications\\MissingLocationNotification.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\offline\\OfflineIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\offline\\OfflineSyncIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\onboarding\\FirstAlbumPrompt.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\onboarding\\ProfileCompletionPrompt.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\photos\\EnhancedLightbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\photos\\PhotoGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\photos\\PhotoMetadataEditor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\photos\\PhotoViewer.tsx","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'currentPhoto'. Either include it or remove the dependency array.","line":98,"column":6,"nodeType":"ArrayExpression","endLine":98,"endColumn":48,"suggestions":[{"desc":"Update the dependencies array to be: [currentIndex, x, y, scale, onPhotoChange, currentPhoto]","fix":{"range":[2997,3039],"text":"[currentIndex, x, y, scale, onPhotoChange, currentPhoto]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\playlists\\PlaylistCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\privacy\\AlbumPrivacyControls.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\providers\\QueryProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\reactions\\ReactionButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\reactions\\ReactionPicker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\reactions\\ReactionsList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\search\\AdvancedSearch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\search\\GlobalSearch.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Button' is defined but never used.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Album' is defined but never used.","line":22,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Photo' is defined but never used.","line":22,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":27},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'performSearch'. Either include it or remove the dependency array.","line":60,"column":6,"nodeType":"ArrayExpression","endLine":60,"endColumn":19,"suggestions":[{"desc":"Update the dependencies array to be: [performSearch, query, user]","fix":{"range":[1666,1679],"text":"[performSearch, query, user]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\nimport { useAuth } from '@/components/auth/AuthProvider';\r\nimport { createClient } from '@/lib/supabase/client';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport {\r\n  Search,\r\n  X,\r\n  Image as ImageIcon,\r\n  Folder,\r\n  MapPin,\r\n  Calendar,\r\n  Loader2,\r\n  ArrowRight\r\n} from 'lucide-react';\r\nimport Image from 'next/image';\r\nimport { getPhotoUrl } from '@/lib/utils/photo-url';\r\nimport type { Album, Photo } from '@/types/database';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface SearchResult {\r\n  type: 'album' | 'photo';\r\n  id: string;\r\n  title: string;\r\n  subtitle?: string;\r\n  thumbnail?: string;\r\n  date?: string;\r\n  location?: string;\r\n  albumId?: string; // For photos\r\n}\r\n\r\nexport function GlobalSearch() {\r\n  const { user } = useAuth();\r\n  const router = useRouter();\r\n  const [query, setQuery] = useState('');\r\n  const [results, setResults] = useState<SearchResult[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [focused, setFocused] = useState(false);\r\n  const [selectedIndex, setSelectedIndex] = useState(0);\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  const resultsRef = useRef<HTMLDivElement>(null);\r\n  const supabase = createClient();\r\n\r\n  // Debounced search\r\n  useEffect(() => {\r\n    if (!query.trim() || !user) {\r\n      setResults([]);\r\n      return;\r\n    }\r\n\r\n    const timeoutId = setTimeout(() => {\r\n      performSearch(query);\r\n    }, 300);\r\n\r\n    return () => clearTimeout(timeoutId);\r\n  }, [query, user]);\r\n\r\n  const performSearch = async (searchQuery: string) => {\r\n    setLoading(true);\r\n\r\n    try {\r\n      const lowerQuery = searchQuery.toLowerCase();\r\n\r\n      // Search albums\r\n      const { data: albums } = await supabase\r\n        .from('albums')\r\n        .select('id, title, description, location_name, date_start, cover_photo_url')\r\n        .eq('user_id', user!.id)\r\n        .or(`title.ilike.%${lowerQuery}%,description.ilike.%${lowerQuery}%,location_name.ilike.%${lowerQuery}%`)\r\n        .limit(10);\r\n\r\n      // Search photos\r\n      const { data: photos } = await supabase\r\n        .from('photos')\r\n        .select('id, album_id, caption, location_name, taken_at, file_path')\r\n        .eq('user_id', user!.id)\r\n        .or(`caption.ilike.%${lowerQuery}%,location_name.ilike.%${lowerQuery}%`)\r\n        .limit(10);\r\n\r\n      const searchResults: SearchResult[] = [];\r\n\r\n      // Add albums\r\n      if (albums) {\r\n        albums.forEach(album => {\r\n          searchResults.push({\r\n            type: 'album',\r\n            id: album.id,\r\n            title: album.title,\r\n            subtitle: album.description || undefined,\r\n            thumbnail: album.cover_photo_url ? getPhotoUrl(album.cover_photo_url) || undefined : undefined,\r\n            date: album.date_start || undefined,\r\n            location: album.location_name || undefined,\r\n          });\r\n        });\r\n      }\r\n\r\n      // Add photos\r\n      if (photos) {\r\n        photos.forEach(photo => {\r\n          searchResults.push({\r\n            type: 'photo',\r\n            id: photo.id,\r\n            title: photo.caption || 'Untitled Photo',\r\n            subtitle: photo.location_name || undefined,\r\n            thumbnail: getPhotoUrl(photo.file_path) || undefined,\r\n            date: photo.taken_at || undefined,\r\n            location: photo.location_name || undefined,\r\n            albumId: photo.album_id,\r\n          });\r\n        });\r\n      }\r\n\r\n      // Sort by relevance (albums first, then photos)\r\n      searchResults.sort((a, b) => {\r\n        if (a.type === 'album' && b.type === 'photo') return -1;\r\n        if (a.type === 'photo' && b.type === 'album') return 1;\r\n        return 0;\r\n      });\r\n\r\n      setResults(searchResults);\r\n      setSelectedIndex(0);\r\n    } catch (error) {\r\n      console.error('Search error:', error);\r\n      setResults([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSelect = (result: SearchResult) => {\r\n    if (result.type === 'album') {\r\n      router.push(`/albums/${result.id}`);\r\n    } else if (result.type === 'photo' && result.albumId) {\r\n      router.push(`/albums/${result.albumId}?photo=${result.id}`);\r\n    }\r\n\r\n    // Clear search\r\n    setQuery('');\r\n    setResults([]);\r\n    setFocused(false);\r\n    inputRef.current?.blur();\r\n  };\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent) => {\r\n    if (results.length === 0) return;\r\n\r\n    switch (e.key) {\r\n      case 'ArrowDown':\r\n        e.preventDefault();\r\n        setSelectedIndex(prev => Math.min(prev + 1, results.length - 1));\r\n        break;\r\n      case 'ArrowUp':\r\n        e.preventDefault();\r\n        setSelectedIndex(prev => Math.max(prev - 1, 0));\r\n        break;\r\n      case 'Enter':\r\n        e.preventDefault();\r\n        if (results[selectedIndex]) {\r\n          handleSelect(results[selectedIndex]);\r\n        }\r\n        break;\r\n      case 'Escape':\r\n        e.preventDefault();\r\n        setQuery('');\r\n        setResults([]);\r\n        setFocused(false);\r\n        inputRef.current?.blur();\r\n        break;\r\n    }\r\n  };\r\n\r\n  // Close on click outside\r\n  useEffect(() => {\r\n    const handleClickOutside = (e: MouseEvent) => {\r\n      if (\r\n        resultsRef.current &&\r\n        !resultsRef.current.contains(e.target as Node) &&\r\n        inputRef.current &&\r\n        !inputRef.current.contains(e.target as Node)\r\n      ) {\r\n        setFocused(false);\r\n      }\r\n    };\r\n\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => document.removeEventListener('mousedown', handleClickOutside);\r\n  }, []);\r\n\r\n  const showResults = focused && (results.length > 0 || loading);\r\n\r\n  return (\r\n    <div className=\"relative w-full max-w-2xl\">\r\n      <div className=\"relative\">\r\n        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\r\n        <Input\r\n          ref={inputRef}\r\n          type=\"text\"\r\n          placeholder=\"Search albums, photos, locations...\"\r\n          value={query}\r\n          onChange={(e) => setQuery(e.target.value)}\r\n          onFocus={() => setFocused(true)}\r\n          onKeyDown={handleKeyDown}\r\n          className=\"pl-10 pr-10\"\r\n        />\r\n        {query && (\r\n          <button\r\n            onClick={() => {\r\n              setQuery('');\r\n              setResults([]);\r\n            }}\r\n            className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\r\n          >\r\n            <X className=\"h-4 w-4\" />\r\n          </button>\r\n        )}\r\n      </div>\r\n\r\n      {/* Results dropdown */}\r\n      {showResults && (\r\n        <div\r\n          ref={resultsRef}\r\n          className=\"absolute top-full mt-2 w-full bg-white rounded-lg shadow-lg border border-gray-200 max-h-96 overflow-y-auto z-50\"\r\n        >\r\n          {loading ? (\r\n            <div className=\"flex items-center justify-center py-8\">\r\n              <Loader2 className=\"h-5 w-5 animate-spin text-blue-600\" />\r\n            </div>\r\n          ) : results.length > 0 ? (\r\n            <div className=\"py-2\">\r\n              {results.map((result, index) => (\r\n                <button\r\n                  key={`${result.type}-${result.id}`}\r\n                  onClick={() => handleSelect(result)}\r\n                  className={cn(\r\n                    'w-full px-4 py-3 flex items-center gap-3 hover:bg-gray-50 transition-colors text-left',\r\n                    index === selectedIndex && 'bg-blue-50'\r\n                  )}\r\n                >\r\n                  {/* Thumbnail */}\r\n                  <div className=\"w-12 h-12 flex-shrink-0 bg-gray-100 rounded overflow-hidden\">\r\n                    {result.thumbnail ? (\r\n                      <Image\r\n                        src={result.thumbnail}\r\n                        alt={result.title}\r\n                        width={48}\r\n                        height={48}\r\n                        className=\"object-cover w-full h-full\"\r\n                      />\r\n                    ) : (\r\n                      <div className=\"w-full h-full flex items-center justify-center\">\r\n                        {result.type === 'album' ? (\r\n                          <Folder className=\"h-6 w-6 text-gray-400\" />\r\n                        ) : (\r\n                          <ImageIcon className=\"h-6 w-6 text-gray-400\" />\r\n                        )}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n\r\n                  {/* Content */}\r\n                  <div className=\"flex-1 min-w-0\">\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <Badge variant={result.type === 'album' ? 'default' : 'secondary'} className=\"text-xs\">\r\n                        {result.type}\r\n                      </Badge>\r\n                      <h4 className=\"font-medium text-sm truncate\">{result.title}</h4>\r\n                    </div>\r\n                    {result.subtitle && (\r\n                      <p className=\"text-xs text-gray-500 truncate mt-1\">{result.subtitle}</p>\r\n                    )}\r\n                    <div className=\"flex items-center gap-3 mt-1 text-xs text-gray-400\">\r\n                      {result.location && (\r\n                        <span className=\"flex items-center gap-1\">\r\n                          <MapPin className=\"h-3 w-3\" />\r\n                          {result.location}\r\n                        </span>\r\n                      )}\r\n                      {result.date && (\r\n                        <span className=\"flex items-center gap-1\">\r\n                          <Calendar className=\"h-3 w-3\" />\r\n                          {new Date(result.date).toLocaleDateString()}\r\n                        </span>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* Arrow */}\r\n                  <ArrowRight className=\"h-4 w-4 text-gray-400 flex-shrink-0\" />\r\n                </button>\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            <div className=\"py-8 text-center text-gray-500 text-sm\">\r\n              No results found for &quot;{query}&quot;\r\n            </div>\r\n          )}\r\n\r\n          {/* Keyboard shortcuts hint */}\r\n          <div className=\"border-t border-gray-100 px-4 py-2 bg-gray-50 text-xs text-gray-500 flex items-center justify-between\">\r\n            <span>Use ↑↓ to navigate, Enter to select, Esc to close</span>\r\n            <span>{results.length} results</span>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\seo\\SEOMetadata.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\social\\Comments.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\social\\FollowButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\social\\FollowLists.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\social\\FollowRequests.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\social\\LikeButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\social\\PrivateAccountMessage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\social\\UserLink.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\stories\\CreateStoryModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\stories\\StoryTray.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\stories\\StoryViewer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\ui\\FloatingActionButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\ui\\LazyWrapper.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\ui\\alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\ui\\avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\ui\\badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\ui\\button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\ui\\card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\ui\\checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\ui\\command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\ui\\dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\ui\\dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\ui\\favorite-button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\ui\\form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\ui\\input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\ui\\label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\ui\\loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\ui\\optimized-image.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\ui\\popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\ui\\progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\ui\\scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\ui\\select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\ui\\separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\ui\\skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\ui\\slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\ui\\switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\ui\\tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\ui\\textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\ui\\theme-toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\ui\\tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\weather\\PhotoWeatherContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\weather\\WeatherDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\components\\wishlist\\LocationWishlist.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\hooks\\useStoryViewer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\ai\\album-suggestions.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DateRange' is defined but never used.","line":18,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'processed' is assigned a value but never used.","line":40,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'endDate' is defined but never used.","line":111,"column":69,"nodeType":null,"messageId":"unusedVar","endLine":111,"endColumn":76}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Photo } from '@/types/database';\r\nimport { clusterPhotos, PhotoCluster } from '@/lib/utils/photo-clustering';\r\n\r\nexport interface AlbumSuggestion {\r\n  id: string;\r\n  suggested_title: string;\r\n  suggested_description: string;\r\n  photos: Photo[];\r\n  start_date?: string;\r\n  end_date?: string;\r\n  location_name?: string;\r\n  latitude?: number;\r\n  longitude?: number;\r\n  confidence_score: number;\r\n  reason: string;\r\n}\r\n\r\ninterface DateRange {\r\n  start: Date;\r\n  end: Date;\r\n}\r\n\r\n/**\r\n * Analyze photos and suggest album groupings based on:\r\n * - Date proximity (photos within 3 days = same trip)\r\n * - Location clustering (within 50km)\r\n * - Time gaps between photos\r\n */\r\nexport function generateAlbumSuggestions(photos: Photo[]): AlbumSuggestion[] {\r\n  // Filter photos with dates\r\n  const photosWithDates = photos.filter(p => p.taken_at).sort((a, b) => {\r\n    return new Date(a.taken_at!).getTime() - new Date(b.taken_at!).getTime();\r\n  });\r\n\r\n  if (photosWithDates.length === 0) {\r\n    return [];\r\n  }\r\n\r\n  const suggestions: AlbumSuggestion[] = [];\r\n  const processed = new Set<string>();\r\n\r\n  // Group photos by date proximity (3-day gap threshold)\r\n  const DAY_GAP_THRESHOLD = 3;\r\n  const dateGroups: Photo[][] = [];\r\n  let currentGroup: Photo[] = [photosWithDates[0]];\r\n\r\n  for (let i = 1; i < photosWithDates.length; i++) {\r\n    const prevDate = new Date(photosWithDates[i - 1].taken_at!);\r\n    const currDate = new Date(photosWithDates[i].taken_at!);\r\n    const dayDiff = (currDate.getTime() - prevDate.getTime()) / (1000 * 60 * 60 * 24);\r\n\r\n    if (dayDiff <= DAY_GAP_THRESHOLD) {\r\n      currentGroup.push(photosWithDates[i]);\r\n    } else {\r\n      if (currentGroup.length >= 3) {\r\n        // Only suggest if there are at least 3 photos\r\n        dateGroups.push(currentGroup);\r\n      }\r\n      currentGroup = [photosWithDates[i]];\r\n    }\r\n  }\r\n\r\n  // Don't forget the last group\r\n  if (currentGroup.length >= 3) {\r\n    dateGroups.push(currentGroup);\r\n  }\r\n\r\n  // For each date group, further cluster by location\r\n  for (const group of dateGroups) {\r\n    // Cluster photos by location\r\n    const locationClusters = clusterPhotos(group, 50); // 50km radius\r\n\r\n    for (const cluster of locationClusters) {\r\n      if (cluster.photos.length < 3) continue; // Skip small clusters\r\n\r\n      const photos = cluster.photos;\r\n      const dates = photos.map(p => new Date(p.taken_at!)).sort((a, b) => a.getTime() - b.getTime());\r\n      const startDate = dates[0];\r\n      const endDate = dates[dates.length - 1];\r\n\r\n      // Generate title based on location and date\r\n      const title = generateAlbumTitle(cluster, startDate, endDate);\r\n      const description = generateAlbumDescription(cluster, startDate, endDate);\r\n\r\n      // Calculate confidence score based on various factors\r\n      const confidence = calculateConfidenceScore(cluster, startDate, endDate);\r\n\r\n      suggestions.push({\r\n        id: `suggestion-${cluster.id}`,\r\n        suggested_title: title,\r\n        suggested_description: description,\r\n        photos: photos,\r\n        start_date: startDate.toISOString(),\r\n        end_date: endDate.toISOString(),\r\n        location_name: cluster.location_name,\r\n        latitude: cluster.latitude,\r\n        longitude: cluster.longitude,\r\n        confidence_score: confidence,\r\n        reason: generateReason(cluster, startDate, endDate),\r\n      });\r\n    }\r\n  }\r\n\r\n  // Sort by confidence score (highest first)\r\n  return suggestions.sort((a, b) => b.confidence_score - a.confidence_score);\r\n}\r\n\r\n/**\r\n * Generate a suggested album title based on location and date\r\n */\r\nfunction generateAlbumTitle(cluster: PhotoCluster, startDate: Date, endDate: Date): string {\r\n  const monthYear = startDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });\r\n\r\n  if (cluster.location_name) {\r\n    // Extract city name from location_name if possible\r\n    const parts = cluster.location_name.split(',');\r\n    const cityName = parts[0].trim();\r\n    return `${cityName} - ${monthYear}`;\r\n  }\r\n\r\n  // Fallback to just date\r\n  return `Trip - ${monthYear}`;\r\n}\r\n\r\n/**\r\n * Generate a suggested album description\r\n */\r\nfunction generateAlbumDescription(cluster: PhotoCluster, startDate: Date, endDate: Date): string {\r\n  const daysDiff = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\r\n  const photoCount = cluster.photos.length;\r\n\r\n  if (daysDiff === 0) {\r\n    return `${photoCount} photos from a day ${cluster.location_name ? `in ${cluster.location_name}` : ''}.`;\r\n  } else {\r\n    return `${photoCount} photos from a ${daysDiff + 1}-day trip${cluster.location_name ? ` to ${cluster.location_name}` : ''}.`;\r\n  }\r\n}\r\n\r\n/**\r\n * Calculate confidence score (0-100) based on:\r\n * - Number of photos\r\n * - Date range consistency\r\n * - Location data availability\r\n * - Photo density (photos per day)\r\n */\r\nfunction calculateConfidenceScore(cluster: PhotoCluster, startDate: Date, endDate: Date): number {\r\n  let score = 0;\r\n\r\n  // Photo count score (max 30 points)\r\n  const photoCount = cluster.photos.length;\r\n  if (photoCount >= 20) score += 30;\r\n  else if (photoCount >= 10) score += 25;\r\n  else if (photoCount >= 5) score += 20;\r\n  else score += 15;\r\n\r\n  // Location data availability (max 25 points)\r\n  if (cluster.location_name) score += 25;\r\n  else if (cluster.latitude && cluster.longitude) score += 15;\r\n\r\n  // Date range consistency (max 25 points)\r\n  const daysDiff = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\r\n  if (daysDiff <= 7) score += 25;\r\n  else if (daysDiff <= 14) score += 20;\r\n  else if (daysDiff <= 30) score += 15;\r\n  else score += 10;\r\n\r\n  // Photo density (max 20 points)\r\n  const photosPerDay = photoCount / (daysDiff + 1);\r\n  if (photosPerDay >= 5) score += 20;\r\n  else if (photosPerDay >= 3) score += 15;\r\n  else if (photosPerDay >= 1) score += 10;\r\n  else score += 5;\r\n\r\n  return Math.min(100, score);\r\n}\r\n\r\n/**\r\n * Generate a human-readable reason for the suggestion\r\n */\r\nfunction generateReason(cluster: PhotoCluster, startDate: Date, endDate: Date): string {\r\n  const daysDiff = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\r\n  const photoCount = cluster.photos.length;\r\n\r\n  const reasons: string[] = [];\r\n\r\n  reasons.push(`${photoCount} photos taken`);\r\n\r\n  if (daysDiff === 0) {\r\n    reasons.push('on the same day');\r\n  } else {\r\n    reasons.push(`over ${daysDiff + 1} days`);\r\n  }\r\n\r\n  if (cluster.location_name) {\r\n    reasons.push(`in ${cluster.location_name}`);\r\n  }\r\n\r\n  return reasons.join(' ') + '.';\r\n}\r\n\r\n/**\r\n * Filter out suggestions that overlap with existing albums\r\n */\r\nexport function filterExistingAlbums(\r\n  suggestions: AlbumSuggestion[],\r\n  existingAlbumPhotoIds: Set<string>\r\n): AlbumSuggestion[] {\r\n  return suggestions\r\n    .map(suggestion => {\r\n      // Filter out photos that are already in albums\r\n      const newPhotos = suggestion.photos.filter(p => !existingAlbumPhotoIds.has(p.id));\r\n\r\n      if (newPhotos.length < 3) {\r\n        return null; // Skip if too few photos remain\r\n      }\r\n\r\n      return {\r\n        ...suggestion,\r\n        photos: newPhotos,\r\n        confidence_score: (suggestion.confidence_score * newPhotos.length) / suggestion.photos.length,\r\n      };\r\n    })\r\n    .filter((s): s is AlbumSuggestion => s !== null);\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\capacitor\\camera.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\capacitor\\geolocation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\config\\bundle-optimization.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\config\\security.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\contexts\\ThemeContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\countries\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\design-tokens.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\flight-animation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\hooks\\useAlbumLocationData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\hooks\\useAsyncOperation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\hooks\\useAuth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\hooks\\useFavorites.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\hooks\\useFeedData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\hooks\\useFlightAnimation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\hooks\\useFollows.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\hooks\\useGlobeReactions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\hooks\\useImageOptimization.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\hooks\\useIntersectionObserver.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\hooks\\useLoadingState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\hooks\\useOfflineSync.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\hooks\\usePWA.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\hooks\\usePhotoUpload.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'generateSizedFilename' is defined but never used.","line":3,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":51}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\r\nimport { createClient } from '@/lib/supabase/client';\r\nimport { generateImageSizes, generateSizedFilename, calculateSizeReduction, IMAGE_SIZES } from '@/lib/utils/image-processing';\r\nimport { log } from '@/lib/utils/logger';\r\n\r\nexport interface UploadProgress {\r\n  filename: string;\r\n  progress: number;\r\n  status: 'pending' | 'uploading' | 'completed' | 'error';\r\n  error?: string;\r\n}\r\n\r\nexport interface UploadedPhoto {\r\n  originalPath: string;\r\n  thumbnailPath?: string;\r\n  mediumPath?: string;\r\n  largePath?: string;\r\n  originalSize: number;\r\n  totalSize: number;\r\n  sizeReduction: number;\r\n}\r\n\r\nexport function usePhotoUpload() {\r\n  const [uploading, setUploading] = useState(false);\r\n  const [progress, setProgress] = useState<Record<string, UploadProgress>>({});\r\n  const supabase = createClient();\r\n\r\n  const uploadPhoto = async (\r\n    file: File,\r\n    albumId: string,\r\n    userId: string,\r\n    generateThumbnails: boolean = true\r\n  ): Promise<UploadedPhoto | null> => {\r\n    const fileId = `${Date.now()}-${file.name}`;\r\n\r\n    try {\r\n      setProgress(prev => ({\r\n        ...prev,\r\n        [fileId]: {\r\n          filename: file.name,\r\n          progress: 0,\r\n          status: 'uploading',\r\n        },\r\n      }));\r\n\r\n      const fileExt = file.name.split('.').pop();\r\n      const baseFileName = `${albumId}/${Date.now()}-${Math.random().toString(36).substring(7)}`;\r\n      const originalPath = `${baseFileName}.${fileExt}`;\r\n\r\n      let thumbnailPath: string | undefined;\r\n      let mediumPath: string | undefined;\r\n      let largePath: string | undefined;\r\n      let totalSize = file.size;\r\n\r\n      if (generateThumbnails) {\r\n        // Generate multiple sizes\r\n        const sizes = await generateImageSizes(file);\r\n\r\n        // Upload thumbnail\r\n        if (sizes.thumbnail) {\r\n          thumbnailPath = `${baseFileName}${IMAGE_SIZES.thumbnail.suffix}.jpg`;\r\n          await supabase.storage\r\n            .from('photos')\r\n            .upload(thumbnailPath, sizes.thumbnail.blob, {\r\n              cacheControl: '31536000', // 1 year\r\n              upsert: false,\r\n            });\r\n          totalSize += sizes.thumbnail.size;\r\n        }\r\n\r\n        // Upload medium\r\n        if (sizes.medium) {\r\n          mediumPath = `${baseFileName}${IMAGE_SIZES.medium.suffix}.jpg`;\r\n          await supabase.storage\r\n            .from('photos')\r\n            .upload(mediumPath, sizes.medium.blob, {\r\n              cacheControl: '31536000',\r\n              upsert: false,\r\n            });\r\n          totalSize += sizes.medium.size;\r\n        }\r\n\r\n        // Upload large\r\n        if (sizes.large) {\r\n          largePath = `${baseFileName}${IMAGE_SIZES.large.suffix}.jpg`;\r\n          await supabase.storage\r\n            .from('photos')\r\n            .upload(largePath, sizes.large.blob, {\r\n              cacheControl: '31536000',\r\n              upsert: false,\r\n            });\r\n          totalSize += sizes.large.size;\r\n        }\r\n\r\n        setProgress(prev => ({\r\n          ...prev,\r\n          [fileId]: {\r\n            ...prev[fileId],\r\n            progress: 70,\r\n          },\r\n        }));\r\n      }\r\n\r\n      // Upload original\r\n      const { error: uploadError } = await supabase.storage\r\n        .from('photos')\r\n        .upload(originalPath, file, {\r\n          cacheControl: '31536000',\r\n          upsert: false,\r\n        });\r\n\r\n      if (uploadError) throw uploadError;\r\n\r\n      setProgress(prev => ({\r\n        ...prev,\r\n        [fileId]: {\r\n          ...prev[fileId],\r\n          progress: 100,\r\n          status: 'completed',\r\n        },\r\n      }));\r\n\r\n      const sizeReduction = generateThumbnails\r\n        ? calculateSizeReduction(file.size * 4, totalSize) // Rough estimate\r\n        : 0;\r\n\r\n      log.info('Photo uploaded successfully', {\r\n        component: 'usePhotoUpload',\r\n        filename: file.name,\r\n        originalSize: file.size,\r\n        totalSize,\r\n        sizeReduction: `${sizeReduction}%`,\r\n      });\r\n\r\n      return {\r\n        originalPath,\r\n        thumbnailPath,\r\n        mediumPath,\r\n        largePath,\r\n        originalSize: file.size,\r\n        totalSize,\r\n        sizeReduction,\r\n      };\r\n    } catch (error) {\r\n      log.error('Photo upload failed', {\r\n        component: 'usePhotoUpload',\r\n        filename: file.name,\r\n      }, error as Error);\r\n\r\n      setProgress(prev => ({\r\n        ...prev,\r\n        [fileId]: {\r\n          ...prev[fileId],\r\n          status: 'error',\r\n          error: error instanceof Error ? error.message : 'Upload failed',\r\n        },\r\n      }));\r\n\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const uploadMultiple = async (\r\n    files: File[],\r\n    albumId: string,\r\n    userId: string,\r\n    generateThumbnails: boolean = true\r\n  ): Promise<UploadedPhoto[]> => {\r\n    setUploading(true);\r\n\r\n    const results: UploadedPhoto[] = [];\r\n\r\n    for (const file of files) {\r\n      const result = await uploadPhoto(file, albumId, userId, generateThumbnails);\r\n      if (result) {\r\n        results.push(result);\r\n      }\r\n    }\r\n\r\n    setUploading(false);\r\n\r\n    return results;\r\n  };\r\n\r\n  const clearProgress = () => {\r\n    setProgress({});\r\n  };\r\n\r\n  return {\r\n    uploadPhoto,\r\n    uploadMultiple,\r\n    uploading,\r\n    progress,\r\n    clearProgress,\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\hooks\\usePhotos.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchPhotos'. Either include it or remove the dependency array.","line":80,"column":6,"nodeType":"ArrayExpression","endLine":80,"endColumn":61,"suggestions":[{"desc":"Update the dependencies array to be: [options.userId, options.albumId, options.withLocation, fetchPhotos]","fix":{"range":[2411,2466],"text":"[options.userId, options.albumId, options.withLocation, fetchPhotos]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\nimport { createClient } from '@/lib/supabase/client';\r\nimport { Photo } from '@/types/database';\r\nimport { log } from '@/lib/utils/logger';\r\nimport { filterDuplicatePhotos } from '@/lib/utils/photo-deduplication';\r\n\r\ninterface UsePhotosOptions {\r\n  userId?: string;\r\n  withLocation?: boolean; // Only fetch photos with GPS coordinates\r\n  albumId?: string;\r\n}\r\n\r\ninterface UsePhotosResult {\r\n  photos: Photo[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  refetch: () => Promise<void>;\r\n}\r\n\r\nexport function usePhotos(options: UsePhotosOptions = {}): UsePhotosResult {\r\n  const [photos, setPhotos] = useState<Photo[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const supabase = createClient();\r\n\r\n  const fetchPhotos = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      let query = supabase.from('photos').select('*');\r\n\r\n      // Filter by user if provided\r\n      if (options.userId) {\r\n        query = query.eq('user_id', options.userId);\r\n      }\r\n\r\n      // Filter by album if provided\r\n      if (options.albumId) {\r\n        query = query.eq('album_id', options.albumId);\r\n      }\r\n\r\n      // Only fetch photos with location if specified\r\n      if (options.withLocation) {\r\n        query = query.not('latitude', 'is', null).not('longitude', 'is', null);\r\n      }\r\n\r\n      // Order by taken date (most recent first)\r\n      query = query.order('taken_at', { ascending: false, nullsFirst: false });\r\n\r\n      const { data, error: fetchError } = await query;\r\n\r\n      if (fetchError) {\r\n        log.error('Failed to fetch photos', {\r\n          component: 'usePhotos',\r\n          action: 'fetchPhotos',\r\n          options,\r\n        }, fetchError);\r\n        throw fetchError;\r\n      }\r\n\r\n      // Filter out duplicate photos\r\n      const filteredPhotos = filterDuplicatePhotos(data || []);\r\n      setPhotos(filteredPhotos);\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch photos';\r\n      setError(errorMessage);\r\n      log.error('Error in usePhotos', {\r\n        component: 'usePhotos',\r\n        action: 'fetchPhotos',\r\n        options,\r\n      }, err instanceof Error ? err : new Error(String(err)));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPhotos();\r\n  }, [options.userId, options.albumId, options.withLocation]);\r\n\r\n  return {\r\n    photos,\r\n    loading,\r\n    error,\r\n    refetch: fetchPhotos,\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\hooks\\usePlaylists.ts","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchPlaylists' and 'supabase'. Either include them or remove the dependency array.","line":310,"column":6,"nodeType":"ArrayExpression","endLine":310,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchPlaylists, supabase]","fix":{"range":[8244,8246],"text":"[fetchPlaylists, supabase]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\hooks\\useRealTime.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":75,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2487,2490],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2487,2490],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":240,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":240,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7073,7076],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7073,7076],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":259,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":259,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7825,7828],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7825,7828],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":278,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":278,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8544,8547],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8544,8547],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\hooks\\useSocial.ts","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'checkIfLiked', 'fetchLikes', and 'user'. Either include them or remove the dependency array.","line":88,"column":6,"nodeType":"ArrayExpression","endLine":88,"endColumn":43,"suggestions":[{"desc":"Update the dependencies array to be: [albumId, checkIfLiked, fetchLikes, photoId, storyId, user, user.id]","fix":{"range":[2693,2730],"text":"[albumId, checkIfLiked, fetchLikes, photoId, storyId, user, user.id]"}}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchComments'. Either include it or remove the dependency array.","line":217,"column":6,"nodeType":"ArrayExpression","endLine":217,"endColumn":24,"suggestions":[{"desc":"Update the dependencies array to be: [albumId, fetchComments, photoId]","fix":{"range":[6738,6756],"text":"[albumId, fetchComments, photoId]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\hooks\\useStats.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\hooks\\useSupabaseQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\hooks\\useTravelTimeline.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\hooks\\useUserLevels.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\offline\\storage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\offline\\sync.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\services\\monitoring.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\services\\weatherService.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":232,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":232,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6800,6803],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6800,6803],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":234,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":234,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6905,6908],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6905,6908],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":236,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":236,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7012,7015],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7012,7015],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":238,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":238,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7122,7125],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7122,7125],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":248,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":248,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7453,7456],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7453,7456],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":258,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":258,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7853,7856],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7853,7856],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":263,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":263,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8126,8129],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8126,8129],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":275,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":275,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8664,8667],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8664,8667],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":298,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":298,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9576,9579],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9576,9579],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":315,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":315,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10225,10228],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10225,10228],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":317,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":317,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10372,10375],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10372,10375],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\supabase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\supabase\\admin.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\supabase\\client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\supabase\\server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\accessibility.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\album-export.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\batch-queries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\colorUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\cross-platform-storage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\database-optimization.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\env.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\environment-validator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\error-boundary-test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\error-handler.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_minuteAgo' is assigned a value but never used.","line":365,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":365,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\errorHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\exif-extraction.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\file-hash.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\flightPaths.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\geoCalculations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\globe-optimization.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\haptics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\html-escape.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\image-processing.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\imageOptimization.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\input-validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\lazy-loader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\lazy-loading.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_retry' is assigned a value but never used.","line":69,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":69,"endColumn":18,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\license-info.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\locationUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\logger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\native.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\performance-monitor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\performance.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":150,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":150,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Performance Utilities\r\n * Tools for optimizing Core Web Vitals, especially INP (Interaction to Next Paint)\r\n */\r\n\r\n/**\r\n * Debounce function to limit execution rate\r\n * Useful for search inputs, resize handlers, scroll events\r\n */\r\nexport function debounce<T extends (...args: unknown[]) => unknown>(\r\n  func: T,\r\n  wait: number\r\n): (...args: Parameters<T>) => void {\r\n  let timeout: NodeJS.Timeout | null = null\r\n  return function executedFunction(...args: Parameters<T>) {\r\n    const later = () => {\r\n      timeout = null\r\n      func(...args)\r\n    }\r\n    if (timeout) clearTimeout(timeout)\r\n    timeout = setTimeout(later, wait)\r\n  }\r\n}\r\n\r\n/**\r\n * Throttle function to ensure function executes at most once per interval\r\n * Better for continuous events like scrolling or resizing\r\n */\r\nexport function throttle<T extends (...args: unknown[]) => unknown>(\r\n  func: T,\r\n  limit: number\r\n): (...args: Parameters<T>) => void {\r\n  let inThrottle: boolean\r\n  return function executedFunction(...args: Parameters<T>) {\r\n    if (!inThrottle) {\r\n      func(...args)\r\n      inThrottle = true\r\n      setTimeout(() => (inThrottle = false), limit)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Request Idle Callback polyfill for browsers that don't support it\r\n * Allows scheduling non-critical work during browser idle time\r\n */\r\nexport const requestIdleCallback =\r\n  typeof window !== 'undefined' && 'requestIdleCallback' in window\r\n    ? window.requestIdleCallback\r\n    : (cb: IdleRequestCallback) => {\r\n        const start = Date.now()\r\n        return setTimeout(() => {\r\n          cb({\r\n            didTimeout: false,\r\n            timeRemaining: () => Math.max(0, 50 - (Date.now() - start)),\r\n          })\r\n        }, 1) as unknown as number\r\n      }\r\n\r\n/**\r\n * Cancel Idle Callback polyfill\r\n */\r\nexport const cancelIdleCallback =\r\n  typeof window !== 'undefined' && 'cancelIdleCallback' in window\r\n    ? window.cancelIdleCallback\r\n    : (id: number) => clearTimeout(id)\r\n\r\n/**\r\n * Break up long tasks by yielding to the main thread\r\n * Helps prevent INP issues by allowing browser to process user interactions\r\n */\r\nexport async function yieldToMain(): Promise<void> {\r\n  return new Promise((resolve) => {\r\n    setTimeout(resolve, 0)\r\n  })\r\n}\r\n\r\n/**\r\n * Process array in chunks to avoid blocking main thread\r\n * Useful for large data transformations\r\n */\r\nexport async function processInChunks<T, R>(\r\n  items: T[],\r\n  processor: (item: T) => R,\r\n  chunkSize: number = 50\r\n): Promise<R[]> {\r\n  const results: R[] = []\r\n\r\n  for (let i = 0; i < items.length; i += chunkSize) {\r\n    const chunk = items.slice(i, i + chunkSize)\r\n    const chunkResults = chunk.map(processor)\r\n    results.push(...chunkResults)\r\n\r\n    // Yield to main thread after each chunk\r\n    if (i + chunkSize < items.length) {\r\n      await yieldToMain()\r\n    }\r\n  }\r\n\r\n  return results\r\n}\r\n\r\n/**\r\n * Memoize expensive computations with cache expiry\r\n */\r\nexport function memoizeWithExpiry<T extends (...args: unknown[]) => unknown>(\r\n  fn: T,\r\n  ttl: number = 5000\r\n): T {\r\n  const cache = new Map<string, { value: ReturnType<T>; timestamp: number }>()\r\n\r\n  return ((...args: Parameters<T>): ReturnType<T> => {\r\n    const key = JSON.stringify(args)\r\n    const cached = cache.get(key)\r\n\r\n    if (cached && Date.now() - cached.timestamp < ttl) {\r\n      return cached.value\r\n    }\r\n\r\n    const value = fn(...args) as ReturnType<T>\r\n    cache.set(key, { value, timestamp: Date.now() })\r\n\r\n    // Clean up old entries\r\n    setTimeout(() => cache.delete(key), ttl)\r\n\r\n    return value\r\n  }) as T\r\n}\r\n\r\n/**\r\n * Observe and report slow interactions (INP issues)\r\n */\r\nexport function observeINP(callback: (duration: number, target: string) => void) {\r\n  if (typeof window === 'undefined') return () => {}\r\n\r\n  const observer = new PerformanceObserver((list) => {\r\n    for (const entry of list.getEntries()) {\r\n      // Report interactions slower than 200ms (INP \"needs improvement\" threshold)\r\n      if (entry.duration > 200) {\r\n        const target = (entry as PerformanceEventTiming).target\r\n          ? (entry as PerformanceEventTiming).target?.toString() || 'unknown'\r\n          : 'unknown'\r\n        callback(entry.duration, target)\r\n      }\r\n    }\r\n  })\r\n\r\n  try {\r\n    observer.observe({ type: 'event', buffered: true })\r\n  } catch (e) {\r\n    // Event timing not supported\r\n    console.warn('Event timing not supported in this browser')\r\n  }\r\n\r\n  return () => observer.disconnect()\r\n}\r\n\r\n/**\r\n * Lazy load heavy components using Intersection Observer\r\n */\r\nexport function useLazyLoad(ref: React.RefObject<HTMLElement>, callback: () => void) {\r\n  if (typeof window === 'undefined') return\r\n\r\n  const observer = new IntersectionObserver(\r\n    (entries) => {\r\n      entries.forEach((entry) => {\r\n        if (entry.isIntersecting) {\r\n          callback()\r\n          observer.disconnect()\r\n        }\r\n      })\r\n    },\r\n    { rootMargin: '100px' }\r\n  )\r\n\r\n  if (ref.current) {\r\n    observer.observe(ref.current)\r\n  }\r\n\r\n  return () => observer.disconnect()\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\photo-clustering.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\photo-deduplication.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":59,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1965,1968],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1965,1968],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\photo-url.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\platform.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\privacy.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":176,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":176,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4468,4471],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4468,4471],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\pwa.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\seo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\startup-validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\storage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\weather.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\utils\\web-worker.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\validations\\album.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\lib\\validations\\auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\middleware\\rate-limiting.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\middleware\\security.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\types\\database.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\types\\globe.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\src\\types\\stories.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\msidh\\Documents\\Adventure Log Application\\tailwind.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]